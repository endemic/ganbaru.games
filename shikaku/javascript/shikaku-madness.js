var LEVELS = [
      {"size":10,"squares":[[7,9,3,3],[9,6,1,7],[7,6,2,5],[5,1,4,2],[5,4,2,3],[3,8,4,4],[0,9,7,1],[0,8,2,6],[2,8,1,6],[2,2,3,3],[0,2,2,3],[3,4,2,2]],"difficulty":"beginner","clues":[[2,7,6],[5,3,6],[1,1,6],[0,9,7],[0,8,12],[7,6,10],[9,9,9],[6,6,16],[9,3,7],[7,1,8],[4,3,4],[3,1,9]]},
      {"size":10,"squares":[[0,9,3,4],[1,5,3,4],[5,5,5,1],[5,4,5,2],[4,8,1,7],[5,8,3,3],[0,1,7,2],[7,2,3,3],[5,2,2,1],[0,5,1,4],[3,9,7,1],[8,8,2,3],[3,8,1,3]],"difficulty":"beginner","clues":[[9,0,9],[9,5,5],[3,9,7],[2,9,12],[3,8,3],[4,8,7],[8,8,6],[7,8,9],[5,3,10],[5,2,2],[5,1,14],[0,5,4],[1,5,12]]},
      {"size":10,"squares":[[1,6,3,3],[1,3,4,2],[4,6,2,3],[4,8,2,2],[2,9,7,1],[9,9,1,8],[6,8,1,7],[7,8,2,4],[0,9,2,2],[2,8,2,2],[0,7,2,1],[0,6,1,7],[5,3,1,4],[6,1,4,2],[7,4,2,3],[3,1,2,2],[1,1,2,2]],"difficulty":"beginner","clues":[[0,8,4],[1,7,2],[0,5,7],[3,7,4],[5,7,4],[8,7,8],[7,3,6],[6,2,7],[3,3,8],[2,1,4],[3,1,4],[8,9,7],[9,9,8],[9,1,8],[5,2,4],[3,4,9],[4,4,6]]},
      {"size":10,"squares":[[3,9,2,4],[6,9,3,3],[5,9,1,4],[6,6,3,1],[9,9,1,6],[5,5,4,2],[7,3,3,3],[0,0,10,1],[0,9,2,6],[2,9,1,9],[0,3,2,3],[3,5,2,3],[5,3,2,3],[3,2,2,2]],"difficulty":"beginner","clues":[[3,7,8],[5,7,4],[7,4,8],[6,2,6],[4,2,4],[3,4,6],[0,2,6],[7,0,10],[8,2,9],[9,4,6],[8,6,3],[7,8,9],[2,9,9],[1,8,12]]},
      {"size":10,"squares":[[0,9,3,3],[1,5,3,2],[0,6,7,1],[4,9,4,3],[3,9,1,3],[8,9,2,3],[7,6,3,1],[8,5,2,3],[4,5,4,3],[0,5,1,6],[1,3,3,1],[1,2,3,3],[6,2,3,3],[9,2,1,3],[4,2,2,3]],"difficulty":"beginner","clues":[[3,7,3],[8,6,3],[9,8,6],[9,3,6],[2,3,3],[2,0,9],[7,1,9],[0,1,6],[4,1,6],[7,3,12],[9,2,3],[5,6,7],[0,9,9],[5,9,12],[2,4,6]]},
      {"size":10,"squares":[[0,9,2,5],[0,4,1,5],[1,0,7,1],[1,1,4,1],[1,2,5,1],[3,9,1,5],[5,9,1,5],[8,9,1,5],[2,9,1,7],[4,9,1,6],[3,4,1,2],[1,4,1,2],[4,3,2,1],[5,4,5,1],[6,3,4,2],[5,1,3,1],[8,1,2,2],[6,9,2,5],[9,9,1,3],[9,6,1,2]],"difficulty":"beginner","clues":[[0,6,10],[0,3,5],[1,4,2],[2,2,5],[3,1,4],[3,0,7],[3,4,2],[2,4,7],[3,6,5],[4,6,6],[5,3,2],[6,1,3],[9,1,4],[8,2,8],[8,4,5],[8,6,5],[9,5,2],[9,7,3],[6,7,10],[5,6,5]]},
      {"size":10,"squares":[[0,9,3,3],[8,9,2,2],[3,8,2,5],[3,9,5,1],[0,3,3,4],[0,6,3,3],[3,2,2,3],[3,3,4,1],[5,7,3,2],[5,5,5,2],[6,2,4,3],[5,2,1,3],[7,3,3,1],[8,7,2,2],[5,8,3,1]],"difficulty":"beginner","clues":[[3,6,10],[3,2,6],[5,1,3],[7,1,12],[8,3,3],[7,4,10],[7,7,6],[8,6,4],[7,8,3],[6,9,5],[0,9,9],[0,4,9],[0,3,12],[3,3,4],[9,9,4]]},
      {"size":10,"squares":[[0,4,5,5],[5,4,5,5],[2,7,4,3],[6,7,4,3],[6,9,4,2],[0,9,6,2],[0,7,2,3]],"difficulty":"beginner","clues":[[8,6,12],[0,6,6],[4,0,25],[5,0,25],[5,9,12],[4,6,12],[6,8,8]]},
      {"size":10,"squares":[[1,8,3,3],[2,5,4,2],[4,9,3,4],[6,5,3,4],[0,3,5,2],[0,5,2,2],[0,9,1,4],[1,9,3,1],[5,3,1,4],[2,1,3,2],[0,1,2,2],[6,1,4,2],[9,9,1,8],[7,9,2,4]],"difficulty":"beginner","clues":[[0,8,4],[4,7,12],[8,7,8],[9,7,8],[4,4,8],[1,3,10],[6,1,8],[6,5,12],[1,8,9],[1,9,3],[1,4,4],[1,1,4],[2,1,6],[5,3,4]]},
      {"size":10,"squares":[[2,6,2,2],[4,8,1,3],[5,7,2,2],[4,5,1,4],[5,4,2,2],[3,4,1,2],[2,4,1,5],[3,2,1,3],[4,1,4,2],[7,4,3,1],[8,3,2,3],[7,3,1,2],[5,2,2,1],[7,8,3,3],[1,8,1,5],[1,3,1,4],[0,9,5,1],[2,8,2,2],[5,9,5,1],[5,8,2,1],[5,5,5,1],[8,0,2,1],[0,8,1,4],[0,4,1,5]],"difficulty":"beginner","clues":[[2,9,5],[8,9,5],[8,7,9],[5,8,2],[5,7,4],[4,7,3],[3,8,4],[1,7,5],[0,6,4],[0,3,5],[1,2,4],[2,3,5],[3,6,4],[3,4,2],[3,1,3],[4,3,4],[5,3,4],[6,5,5],[8,4,3],[7,3,2],[6,2,2],[6,0,8],[9,2,6],[9,0,2]]},
      {"size":10,"squares":[[8,6,1,7],[9,6,1,7],[5,5,3,3],[5,2,2,3],[7,2,1,3],[0,2,3,3],[0,9,3,3],[0,6,4,2],[0,4,4,2],[3,2,1,3],[3,8,2,2],[4,6,1,7],[7,9,3,3],[5,6,3,1],[3,9,4,1],[5,8,2,2]],"difficulty":"beginner","clues":[[7,0,3],[6,0,6],[8,6,7],[9,6,7],[7,5,9],[4,6,7],[0,9,9],[0,2,9],[3,2,3],[0,3,8],[3,6,8],[9,9,9],[7,6,3],[4,9,4],[4,8,4],[5,8,4]]},
      {"size":10,"squares":[[0,9,1,10],[1,0,9,1],[7,3,3,3],[1,5,3,5],[1,8,3,3],[1,9,9,1],[4,8,4,4],[8,8,2,5],[4,4,4,1],[4,3,3,3]],"difficulty":"beginner","clues":[[0,4,10],[9,1,9],[1,9,9],[1,8,9],[1,0,9],[1,1,15],[4,4,4],[4,3,9],[8,7,10],[7,7,16]]},
      {"size":10,"squares":[[3,6,3,2],[3,4,5,2],[6,8,2,4],[0,9,4,3],[4,9,6,1],[4,8,2,2],[8,8,2,3],[8,5,1,6],[9,5,1,3],[9,2,1,3],[5,2,3,3],[4,2,1,3],[2,2,2,3],[0,4,2,5],[0,6,3,2],[2,4,1,2]],"difficulty":"beginner","clues":[[7,7,8],[9,7,6],[9,5,3],[8,4,6],[9,1,3],[2,1,6],[2,4,2],[4,6,6],[1,6,6],[0,7,12],[5,8,4],[5,9,6],[5,2,9],[4,2,3],[5,3,10],[1,4,10]]},
      {"size":10,"squares":[[0,9,2,3],[0,6,3,3],[0,3,1,4],[7,2,3,3],[4,5,6,3],[7,9,3,4],[5,7,2,2],[5,9,2,2],[4,9,1,4],[6,2,1,3],[4,2,2,1],[4,1,2,2],[3,9,1,10],[1,3,2,2],[1,1,2,2],[2,9,1,3]],"difficulty":"beginner","clues":[[1,9,6],[2,8,3],[4,8,4],[6,7,4],[8,8,12],[2,2,4],[1,0,4],[5,0,4],[5,2,2],[9,0,9],[6,0,3],[0,0,4],[3,4,10],[0,6,9],[6,8,4],[4,4,18]]},
      {"size":10,"squares":[[0,9,1,5],[1,9,1,7],[2,9,1,4],[0,2,4,3],[0,4,1,2],[2,5,2,3],[4,3,3,2],[4,1,3,1],[4,0,6,1],[7,5,1,5],[8,7,2,7],[7,9,3,2],[3,9,4,2],[3,7,5,2],[4,5,3,2]],"difficulty":"beginner","clues":[[0,7,5],[2,8,4],[4,9,8],[4,7,10],[0,3,2],[1,1,12],[5,1,3],[8,8,6],[1,9,7],[9,7,14],[7,5,5],[8,0,6],[4,4,6],[2,3,6],[4,3,6]]},
      {"size":10,"squares":[[0,9,1,10],[7,9,3,3],[7,2,3,3],[4,9,3,5],[1,9,2,5],[1,4,2,5],[3,9,1,8],[3,1,3,2],[6,4,1,5],[4,4,2,3],[7,6,3,4]],"difficulty":"beginner","clues":[[0,6,10],[4,1,6],[5,2,6],[6,4,5],[8,5,12],[1,2,10],[1,8,10],[3,7,8],[5,9,15],[9,0,9],[9,9,9]]},
      {"size":10,"squares":[[0,9,3,3],[0,6,4,3],[0,3,3,4],[3,3,3,2],[4,7,2,4],[3,9,1,3],[4,9,2,2],[7,9,3,3],[3,1,3,2],[6,9,1,8],[7,2,3,3],[6,1,1,2],[7,6,2,4],[9,6,1,4]],"difficulty":"beginner","clues":[[9,9,9],[0,0,12],[2,5,12],[1,8,9],[7,0,9],[7,5,8],[9,4,4],[5,9,4],[4,6,8],[3,9,3],[4,2,6],[4,1,6],[6,2,8],[6,1,2]]},
      {"size":10,"squares":[[0,9,3,3],[0,1,2,2],[0,6,4,3],[2,3,2,4],[0,3,2,2],[3,9,3,3],[6,9,2,3],[4,6,2,2],[4,4,3,3],[8,9,2,4],[6,6,2,2],[8,5,2,4],[5,1,5,2],[4,1,1,2],[7,4,1,3]],"difficulty":"beginner","clues":[[6,5,4],[5,3,9],[7,3,3],[4,0,2],[0,9,9],[5,9,9],[6,9,6],[5,6,4],[8,6,8],[9,5,8],[8,1,10],[1,1,4],[0,2,4],[3,3,8],[2,4,12]]},
      {"size":10,"squares":[[0,9,3,3],[0,6,2,2],[0,4,2,2],[2,6,2,4],[0,2,4,3],[3,9,4,3],[4,6,2,7],[7,9,3,3],[8,6,2,3],[6,6,2,5],[8,1,2,2],[8,3,2,2],[6,1,2,2]],"difficulty":"beginner","clues":[[0,6,4],[8,8,9],[7,5,10],[8,2,4],[9,0,4],[7,0,4],[2,1,12],[0,4,4],[0,9,9],[8,6,6],[6,8,12],[2,6,8],[4,4,14]]},
      {"size":10,"squares":[[0,9,1,4],[1,9,6,1],[1,8,1,6],[0,1,3,2],[0,5,1,4],[1,2,7,1],[3,1,7,1],[8,7,2,6],[7,9,3,2],[2,8,5,2],[7,7,1,5],[3,0,7,1],[4,5,3,3],[2,6,5,1],[2,5,2,3]],"difficulty":"beginner","clues":[[0,8,4],[1,7,6],[3,8,10],[3,6,5],[0,4,4],[1,1,6],[3,4,6],[5,4,9],[5,1,7],[5,0,7],[7,3,5],[8,9,6],[5,2,7],[8,2,12],[1,9,6]]},
      {"size":10,"squares":[[1,9,3,5],[2,4,3,3],[4,7,3,3],[7,9,3,2],[5,9,2,2],[4,9,1,2],[7,7,2,4],[9,7,1,5],[5,4,2,4],[7,3,2,3],[9,2,1,3],[3,0,6,1],[0,1,5,1],[0,0,3,1],[0,9,1,8],[1,4,1,3]],"difficulty":"beginner","clues":[[6,8,4],[4,9,2],[3,3,9],[1,2,3],[3,1,5],[0,7,8],[1,7,15],[1,0,3],[3,0,6],[6,5,9],[6,4,8],[7,5,8],[9,8,6],[9,3,5],[7,3,6],[9,2,3]]},
      {"size":10,"squares":[[7,2,3,3],[3,0,4,1],[6,3,1,3],[3,3,3,3],[0,4,3,5],[0,7,6,3],[3,4,7,1],[7,3,3,1],[6,8,4,4],[0,9,10,1],[0,8,6,1]],"difficulty":"beginner","clues":[[9,0,9],[6,0,4],[6,1,3],[2,2,15],[4,2,9],[7,3,3],[9,4,7],[9,5,16],[0,9,10],[0,8,6],[0,7,18]]},
      {"size":10,"squares":[[3,8,2,4],[0,4,10,1],[1,3,2,4],[0,3,1,4],[3,3,7,1],[3,2,1,3],[4,2,2,3],[6,2,4,3],[5,7,2,3],[0,9,10,1],[7,8,3,4],[5,8,2,1],[0,7,3,2],[0,8,3,1],[0,5,3,1]],"difficulty":"beginner","clues":[[1,8,3],[1,6,6],[1,5,3],[4,6,8],[5,8,2],[5,6,6],[8,7,12],[7,4,10],[7,3,7],[7,1,12],[4,1,6],[3,1,3],[2,2,8],[0,2,4],[1,9,10]]},
      {"size":10,"squares":[[1,6,3,3],[2,9,2,3],[0,9,1,8],[1,9,1,3],[1,3,5,4],[0,1,1,2],[4,9,3,6],[7,9,3,2],[7,7,3,4],[6,2,2,2],[6,3,4,1],[8,2,2,3],[6,0,2,1]],"difficulty":"beginner","clues":[[0,0,2],[8,8,6],[7,3,4],[6,0,2],[9,1,6],[1,9,3],[2,4,9],[1,0,20],[9,4,12],[7,1,4],[0,9,8],[3,7,6],[4,7,18]]},
      {"size":10,"squares":[[0,3,4,4],[0,6,7,3],[0,9,3,3],[3,9,7,1],[3,8,7,2],[7,6,3,3],[4,3,2,3],[4,0,6,1],[7,3,3,2],[6,1,4,1],[6,3,1,2]],"difficulty":"beginner","clues":[[4,9,7],[4,8,14],[2,5,21],[8,5,9],[8,2,6],[6,1,4],[6,0,6],[3,0,16],[6,2,2],[4,1,6],[0,9,9]]},
      {"size":10,"squares":[[2,7,2,3],[0,9,2,3],[2,9,4,2],[0,6,2,4],[4,7,2,2],[4,5,2,2],[2,4,2,2],[0,2,3,3],[3,2,3,3],[4,3,5,1],[6,2,1,3],[7,2,3,3],[6,6,2,3],[7,9,3,3],[6,9,1,3],[9,6,1,4],[8,6,1,3]],"difficulty":"beginner","clues":[[1,8,6],[4,9,8],[3,6,6],[5,7,4],[4,4,4],[3,3,4],[2,1,9],[5,0,9],[6,1,3],[8,4,3],[9,4,4],[7,6,6],[8,8,9],[6,8,3],[9,0,9],[5,3,5],[1,3,8]]},
      {"size":10,"squares":[[0,8,3,3],[1,5,3,3],[4,3,3,2],[2,1,3,2],[5,1,4,2],[7,4,3,3],[4,6,3,3],[8,7,2,3],[7,9,1,5],[8,9,2,2],[4,9,3,3],[3,9,1,4],[0,9,3,1],[0,5,1,6],[1,1,1,2],[1,2,3,1],[9,1,1,2]],"difficulty":"beginner","clues":[[8,8,4],[8,7,6],[7,9,5],[2,9,3],[3,9,4],[4,9,9],[0,8,9],[1,1,2],[1,2,3],[1,3,9],[0,2,6],[4,2,6],[4,4,9],[5,1,8],[9,1,2],[8,3,9],[3,0,6]]},
      {"size":10,"squares":[[0,9,3,4],[3,8,2,6],[3,9,7,1],[5,8,2,3],[7,8,3,4],[7,4,3,2],[7,2,3,3],[5,5,2,6],[3,2,2,3],[0,3,3,3],[0,0,3,1],[0,5,3,2]],"difficulty":"beginner","clues":[[5,9,7],[5,7,6],[8,3,6],[2,0,3],[5,4,12],[9,0,9],[9,6,12],[0,9,12],[3,7,12],[3,2,6],[1,5,6],[1,2,9]]},
      {"size":10,"squares":[[2,6,3,3],[5,9,3,3],[7,6,3,2],[5,6,2,5],[0,3,5,2],[0,1,3,2],[0,9,3,3],[0,6,2,3],[3,8,2,2],[9,9,1,3],[8,9,1,3],[3,1,7,2],[7,4,3,3],[3,9,2,1]],"difficulty":"beginner","clues":[[3,7,4],[4,9,2],[8,7,3],[9,9,3],[8,6,6],[2,0,6],[3,0,14],[3,2,10],[7,4,9],[6,4,10],[3,4,9],[0,6,6],[0,7,9],[5,9,9]]},
      {"size":10,"squares":[[0,9,2,3],[2,9,3,3],[2,6,1,7],[0,6,2,7],[3,6,7,1],[6,5,2,6],[3,5,3,6],[8,2,2,3],[8,5,2,3],[5,9,5,3]],"difficulty":"beginner","clues":[[2,9,9],[1,3,14],[2,3,7],[3,3,18],[1,9,6],[9,6,7],[9,5,6],[9,7,15],[7,2,12],[8,2,6]]},
      {"size":10,"squares":[[3,9,2,4],[2,5,5,2],[7,5,2,3],[7,2,3,3],[4,3,3,4],[9,9,1,7],[7,8,2,3],[5,9,4,1],[5,8,2,3],[0,7,3,2],[0,9,3,2],[0,5,2,3],[0,2,3,3],[2,3,2,1],[3,2,1,3]],"difficulty":"easy","clues":[[1,8,6],[3,8,8],[6,9,4],[7,7,6],[9,8,7],[8,4,6],[5,4,10],[1,7,6],[1,4,6],[3,3,2],[3,2,3],[5,2,12],[6,7,6],[9,0,9],[0,0,9]]},
      {"size":10,"squares":[[0,9,5,1],[0,8,4,1],[1,7,2,2],[0,7,1,5],[1,5,3,4],[3,7,3,2],[4,8,4,1],[5,9,5,1],[8,8,2,5],[6,7,2,3],[4,5,2,4],[0,2,1,3],[1,1,6,2],[7,2,3,3],[6,4,1,3],[7,4,1,2],[8,3,2,1]],"difficulty":"easy","clues":[[2,8,4],[4,7,6],[2,7,4],[0,5,5],[2,0,12],[4,3,8],[0,1,3],[7,6,6],[1,9,5],[5,8,4],[8,9,5],[8,7,10],[7,4,2],[6,3,3],[9,3,2],[9,0,9],[2,5,12]]},
      {"size":10,"squares":[[4,7,1,7],[5,7,4,1],[5,6,2,2],[5,4,1,3],[6,3,1,2],[6,4,3,1],[7,6,3,2],[9,9,1,3],[5,9,4,2],[4,9,1,2],[0,9,4,1],[3,8,1,6],[0,8,3,1],[0,7,3,5],[1,2,2,3],[0,2,1,3],[3,2,1,3],[4,0,6,1],[5,1,5,1],[7,2,3,1],[9,4,1,2],[7,3,2,1]],"difficulty":"easy","clues":[[9,0,6],[8,1,5],[8,2,3],[8,3,2],[8,4,3],[9,4,2],[9,6,6],[9,8,3],[7,7,4],[7,8,8],[5,6,4],[6,2,2],[5,3,3],[3,1,3],[0,1,3],[1,4,15],[3,4,6],[4,5,7],[4,8,2],[2,8,3],[3,9,4],[1,2,6]]},
      {"size":10,"squares":[[0,9,1,6],[0,3,5,3],[0,0,10,1],[7,2,3,2],[3,9,7,1],[1,9,2,3],[1,6,5,1],[3,8,4,2],[7,8,3,3],[8,5,2,3],[6,6,1,5],[7,5,1,3],[1,5,5,2],[5,1,2,1],[5,3,1,2]],"difficulty":"easy","clues":[[0,7,6],[2,8,6],[6,7,8],[4,6,5],[4,4,10],[5,3,2],[8,1,6],[3,1,15],[9,0,10],[6,1,2],[9,3,6],[7,3,3],[9,8,9],[9,9,7],[6,6,5]]},
      {"size":10,"squares":[[0,9,4,4],[0,5,4,2],[0,3,4,4],[4,9,5,3],[4,6,4,3],[9,9,1,7],[8,6,1,4],[7,2,3,3],[4,3,4,1],[4,2,3,3]],"difficulty":"easy","clues":[[2,7,16],[5,7,15],[5,4,12],[3,5,8],[3,2,16],[5,3,4],[5,1,9],[9,1,9],[8,4,4],[9,6,7]]},
      {"size":10,"squares":[[0,9,4,4],[4,5,4,4],[8,1,2,2],[0,2,3,3],[7,9,3,3],[1,5,3,3],[3,2,1,3],[4,1,4,2],[8,6,2,3],[8,3,2,2],[4,6,4,1],[4,9,3,3],[0,5,1,3]],"difficulty":"easy","clues":[[0,0,9],[7,1,8],[8,2,4],[8,1,4],[7,2,16],[7,6,4],[7,7,9],[6,7,9],[8,6,6],[0,3,3],[3,2,3],[3,6,16],[3,5,9]]},
      {"size":10,"squares":[[1,8,3,4],[0,9,7,1],[4,8,3,3],[7,9,3,4],[0,8,1,9],[1,3,3,4],[1,4,6,1],[4,5,6,1],[4,3,3,3],[4,0,6,1],[7,4,3,4]],"difficulty":"easy","clues":[[5,7,9],[5,9,7],[8,8,12],[0,5,9],[5,5,6],[2,1,12],[8,0,6],[2,4,6],[1,7,12],[4,2,9],[7,1,12]]},
      {"size":10,"squares":[[7,2,3,3],[4,3,6,1],[1,3,3,3],[5,2,2,2],[2,0,5,1],[4,2,1,2],[0,0,2,1],[0,5,1,5],[1,5,5,2],[7,5,3,2],[8,9,2,4],[7,9,1,4],[6,8,1,5],[0,9,7,1],[4,8,2,3],[0,8,3,3],[3,8,1,3]],"difficulty":"easy","clues":[[9,0,9],[4,2,2],[5,2,4],[6,3,6],[6,6,5],[1,7,9],[3,4,10],[0,3,5],[2,0,5],[1,0,2],[1,3,9],[9,5,6],[9,6,8],[7,9,4],[6,9,7],[4,8,6],[3,8,3]]},
      {"size":10,"squares":[[1,8,2,2],[0,6,4,3],[0,9,1,3],[1,9,9,1],[3,8,5,2],[8,8,2,4],[4,6,4,3],[2,3,4,3],[0,3,2,4],[2,0,8,1],[8,4,2,4],[6,3,2,3]],"difficulty":"easy","clues":[[0,8,3],[1,7,4],[6,5,12],[4,2,12],[9,9,9],[9,7,8],[9,4,8],[6,7,10],[1,5,12],[4,0,8],[6,1,6],[1,0,8]]},
      {"size":10,"squares":[[0,9,1,10],[1,0,9,1],[1,9,3,3],[1,6,3,2],[1,4,3,2],[1,2,5,2],[4,6,2,4],[4,9,3,2],[4,7,6,1],[7,9,3,2],[8,6,2,3],[6,3,3,3],[6,6,2,3],[9,3,1,3]],"difficulty":"easy","clues":[[0,6,10],[3,5,6],[5,4,8],[8,5,6],[1,9,9],[6,7,6],[7,4,6],[9,0,9],[8,1,9],[5,8,6],[8,8,6],[9,3,3],[3,1,10],[1,3,6]]},
      {"size":10,"squares":[[0,9,2,5],[2,8,2,5],[0,1,3,2],[0,4,2,1],[0,3,4,2],[3,1,3,2],[4,4,3,3],[6,1,2,2],[8,6,2,7],[7,8,1,7],[2,9,8,1],[8,8,2,1],[8,7,2,1],[4,5,3,1],[4,7,3,2],[4,8,3,1]],"difficulty":"easy","clues":[[1,0,6],[4,0,6],[5,3,9],[5,5,3],[6,6,6],[6,8,3],[7,9,8],[7,8,7],[9,8,2],[9,5,14],[7,0,4],[8,7,2],[0,9,10],[0,4,2],[2,3,8],[2,4,10]]},
      {"size":10,"squares":[[7,2,3,3],[0,2,7,3],[0,5,4,3],[7,4,3,2],[7,9,3,5],[4,7,3,5],[0,9,7,2],[0,7,4,2]],"difficulty":"easy","clues":[[4,8,14],[9,8,15],[8,4,6],[4,2,21],[2,7,8],[5,3,15],[2,3,12],[9,0,9]]},
      {"size":10,"squares":[[2,8,2,3],[4,8,1,6],[4,2,1,3],[5,6,1,5],[7,8,1,5],[8,8,1,5],[7,1,1,2],[8,3,1,4],[7,3,1,2],[6,2,1,3],[5,1,1,2],[9,7,1,5],[9,2,1,3],[9,9,1,2],[4,9,5,1],[5,8,2,1],[5,7,2,1],[6,6,1,4],[0,9,4,1],[0,7,1,5],[0,8,2,1],[2,5,2,3],[1,7,1,6],[0,2,1,3],[1,1,3,2],[2,2,2,1]],"difficulty":"easy","clues":[[2,9,4],[1,8,2],[0,6,5],[1,4,6],[3,7,6],[0,1,3],[3,0,6],[3,2,2],[4,4,6],[4,1,3],[5,4,5],[6,8,2],[7,9,5],[6,7,2],[9,8,2],[9,5,5],[8,2,4],[8,4,5],[7,2,2],[6,1,3],[5,1,2],[6,3,4],[7,1,2],[9,1,3],[7,7,5],[2,5,6]]},
      {"size":10,"squares":[[0,9,3,4],[0,5,10,1],[0,1,10,1],[2,4,4,3],[7,4,3,3],[6,4,1,3],[0,4,2,2],[0,2,2,1],[0,0,4,1],[4,0,6,1],[3,7,2,2],[5,7,5,2],[7,9,3,2],[3,9,4,2]],"difficulty":"easy","clues":[[1,7,12],[4,8,8],[7,7,10],[9,9,6],[6,5,10],[6,3,3],[8,3,9],[3,3,12],[1,3,4],[0,2,2],[2,1,10],[2,0,4],[5,0,6],[4,6,4]]},
      {"size":10,"squares":[[0,3,5,4],[2,6,3,3],[0,9,3,3],[0,6,2,3],[7,9,3,3],[7,5,3,3],[8,2,2,3],[5,2,3,3],[5,6,2,4],[3,9,4,3],[7,6,3,1]],"difficulty":"easy","clues":[[1,8,9],[8,4,9],[8,6,3],[9,9,9],[1,6,6],[6,6,8],[5,7,12],[0,0,20],[2,6,9],[8,0,6],[7,0,9]]},
      {"size":10,"squares":[[0,9,4,4],[0,4,4,2],[0,5,6,1],[4,9,3,4],[4,3,2,2],[4,4,4,1],[0,2,4,3],[4,1,6,2],[6,3,4,2],[6,5,4,1],[8,4,2,1],[7,9,3,3],[7,6,3,1]],"difficulty":"easy","clues":[[3,8,16],[6,7,12],[8,8,9],[7,6,3],[7,5,4],[4,5,6],[5,4,4],[8,4,2],[7,3,8],[5,2,4],[3,4,8],[2,1,12],[5,0,12]]},
      {"size":10,"squares":[[0,9,1,6],[1,9,3,6],[0,2,3,3],[0,3,10,1],[3,2,7,3],[4,6,4,3],[4,9,4,3],[8,9,2,6]],"difficulty":"easy","clues":[[0,7,6],[2,6,18],[0,0,9],[4,1,21],[1,3,10],[7,7,12],[7,6,12],[9,7,12]]},
      {"size":10,"squares":[[0,9,2,4],[1,5,2,4],[2,1,4,2],[3,5,4,4],[5,9,3,4],[8,9,2,4],[7,5,3,4],[6,1,4,2],[2,9,3,4],[0,5,1,6],[1,1,1,2]],"difficulty":"easy","clues":[[1,3,8],[0,2,6],[1,1,2],[4,0,8],[3,2,16],[9,9,8],[7,8,12],[4,9,12],[1,7,8],[8,1,8],[8,2,12]]},
      {"size":10,"squares":[[0,9,3,3],[1,6,3,3],[2,3,3,3],[5,3,3,3],[6,6,3,3],[7,9,3,3],[3,9,4,3],[4,6,2,3],[0,3,2,4],[8,3,2,4],[2,0,6,1],[9,6,1,3],[0,6,1,3]],"difficulty":"easy","clues":[[9,9,9],[8,3,8],[7,3,9],[8,4,9],[4,8,12],[2,0,6],[5,6,6],[9,4,3],[0,7,9],[0,6,3],[1,6,9],[1,0,8],[2,1,9]]},
      {"size":10,"squares":[[0,9,1,7],[0,1,4,2],[0,2,6,1],[1,4,5,2],[1,8,3,4],[1,9,9,1],[4,8,3,4],[4,1,3,2],[7,8,3,4],[6,4,1,3],[7,2,3,3],[7,4,3,2]],"difficulty":"easy","clues":[[9,1,9],[5,1,6],[7,3,6],[4,2,6],[4,4,10],[1,0,8],[0,6,7],[4,9,9],[9,6,12],[6,3,3],[3,8,12],[5,7,12]]},
      {"size":10,"squares":[[1,8,2,3],[3,7,4,3],[0,9,1,7],[0,2,3,3],[1,4,4,2],[1,5,2,1],[3,2,4,1],[3,1,2,2],[5,4,5,2],[7,9,2,5],[9,9,1,5],[4,9,3,2],[3,9,1,2],[1,9,2,1],[7,2,3,3],[5,0,2,1],[5,1,2,1]],"difficulty":"easy","clues":[[5,6,12],[3,9,2],[2,9,2],[1,7,6],[2,5,2],[9,7,5],[6,0,2],[3,0,4],[2,3,8],[2,2,9],[5,1,2],[4,2,4],[7,2,9],[7,3,10],[0,9,7],[6,9,6],[7,9,10]]},
      {"size":10,"squares":[[0,6,3,2],[0,8,3,2],[0,9,5,1],[3,8,1,5],[2,3,1,2],[0,4,3,1],[0,1,5,2],[0,3,2,2],[3,3,3,2],[9,9,1,5],[5,9,4,1],[4,8,2,2],[6,8,3,2],[4,6,4,2],[8,6,1,7],[9,4,1,5],[4,4,4,1],[5,1,1,2],[6,3,2,4]],"difficulty":"easy","clues":[[2,9,5],[2,7,6],[2,5,6],[3,4,5],[2,4,3],[5,7,4],[7,9,4],[2,3,2],[0,2,4],[2,0,10],[5,0,2],[3,3,6],[7,3,8],[7,4,4],[7,5,8],[8,4,7],[9,5,5],[9,4,5],[8,7,6]]},
      {"size":10,"squares":[[0,9,3,4],[0,5,6,3],[3,9,2,4],[5,9,3,4],[8,9,2,4],[6,5,4,3],[0,2,5,3],[5,2,5,3]],"difficulty":"easy","clues":[[4,7,8],[6,8,12],[9,7,8],[3,1,15],[3,3,18],[6,1,15],[6,3,12],[0,6,12]]},
      {"size":10,"squares":[[3,9,1,6],[4,7,3,2],[4,9,3,1],[4,8,3,1],[7,9,3,2],[7,7,1,7],[8,6,2,2],[8,7,2,1],[9,4,1,4],[8,4,1,4],[4,5,2,3],[6,5,1,5],[2,2,4,2],[0,3,4,1],[0,2,2,3],[2,0,8,1],[0,9,3,1],[0,8,3,2],[0,6,3,3]],"difficulty":"easy","clues":[[2,9,3],[2,7,6],[2,3,4],[1,1,6],[3,1,8],[5,4,6],[6,5,5],[6,7,6],[6,9,3],[9,5,4],[9,2,4],[5,8,3],[8,4,4],[7,2,7],[8,7,2],[8,8,6],[3,6,6],[2,6,9],[3,0,8]]},
      {"size":10,"squares":[[2,5,3,3],[5,9,5,4],[5,5,5,6],[0,2,5,3],[0,9,2,7],[2,9,3,4]],"difficulty":"easy","clues":[[3,7,12],[3,4,9],[6,4,30],[4,1,15],[8,8,20],[0,5,14]]},
      {"size":10,"squares":[[1,9,3,5],[0,2,4,3],[7,9,3,3],[4,7,3,3],[4,4,3,3],[4,1,6,2],[7,3,3,2],[7,6,3,3],[4,9,3,2],[0,9,1,7],[1,3,3,1],[1,4,3,1]],"difficulty":"easy","clues":[[2,4,3],[8,8,9],[5,3,9],[8,2,6],[6,1,12],[0,9,7],[2,9,15],[4,9,6],[3,3,3],[6,5,9],[8,6,9],[2,1,12]]},
      {"size":10,"squares":[[0,8,6,5],[1,3,4,4],[6,8,3,4],[5,3,3,4],[6,4,4,1],[8,3,2,4],[0,3,1,4],[0,9,10,1],[9,8,1,4]],"difficulty":"easy","clues":[[8,8,12],[9,8,4],[8,4,4],[8,3,8],[0,3,4],[1,3,16],[5,3,12],[8,9,10],[0,4,30]]},
      {"size":10,"squares":[[0,9,2,5],[0,4,1,5],[1,0,6,1],[1,1,4,1],[5,4,2,4],[1,4,2,3],[3,9,2,8],[2,9,1,5],[5,9,5,1],[5,8,5,2],[5,6,5,1],[5,5,3,1],[8,5,2,6],[7,4,1,5]],"difficulty":"easy","clues":[[1,6,10],[1,4,6],[2,5,5],[0,3,5],[3,1,4],[3,0,6],[6,2,8],[7,2,5],[6,5,3],[7,6,5],[8,9,5],[3,4,16],[9,8,10],[8,3,12]]},
      {"size":10,"squares":[[2,8,1,4],[0,9,6,1],[3,8,3,2],[0,8,2,2],[0,6,1,7],[1,6,1,3],[1,3,2,4],[2,4,5,1],[3,6,3,2],[6,9,2,5],[9,9,1,10],[8,9,1,9],[3,0,6,1],[7,4,1,4],[4,3,3,3],[3,3,1,3]],"difficulty":"easy","clues":[[3,9,6],[1,8,4],[4,4,5],[7,8,10],[7,3,4],[5,1,9],[3,2,3],[4,0,6],[9,1,10],[8,3,9],[3,6,6],[3,7,6],[2,7,4],[0,0,7],[1,4,3],[1,3,8]]},
      {"size":10,"squares":[[0,9,3,3],[1,6,2,2],[0,6,1,4],[0,2,3,3],[1,4,4,2],[3,8,2,4],[3,9,7,1],[5,8,4,3],[3,1,4,2],[3,2,7,1],[7,1,3,2],[5,5,2,3],[7,5,2,3],[9,8,1,6]],"difficulty":"easy","clues":[[3,9,7],[5,7,12],[9,6,6],[8,4,6],[8,2,7],[8,0,6],[0,5,4],[1,1,9],[4,7,8],[1,9,9],[3,1,8],[1,3,8],[1,5,4],[5,5,6]]},
      {"size":10,"squares":[[0,9,3,6],[3,9,3,7],[0,1,7,2],[0,3,3,1],[0,2,8,1],[6,6,4,2],[6,4,3,2],[9,4,1,5],[8,2,1,3],[7,1,1,2],[6,8,3,2],[6,9,4,1],[9,8,1,2]],"difficulty":"medium","clues":[[8,9,4],[7,3,6],[9,3,5],[8,0,3],[5,2,8],[7,1,2],[3,1,14],[0,3,3],[1,8,18],[3,6,21],[6,8,6],[9,8,2],[7,6,8]]},
      {"size":10,"squares":[[0,9,2,3],[2,9,4,2],[7,9,3,2],[6,9,1,5],[8,7,2,2],[7,7,1,5],[8,4,2,2],[8,5,2,1],[6,2,4,2],[5,0,5,1],[2,3,4,3],[4,7,2,3],[6,4,1,2],[0,4,6,1],[2,7,2,3],[0,6,2,2],[0,3,2,4],[2,0,3,1]],"difficulty":"medium","clues":[[0,6,4],[3,6,6],[5,5,6],[6,7,5],[8,9,6],[7,6,5],[9,6,4],[9,5,2],[9,3,4],[6,3,2],[4,2,12],[4,4,6],[3,0,3],[9,0,5],[9,1,8],[0,9,6],[2,9,8],[1,2,8]]},
      {"size":10,"squares":[[0,2,3,3],[3,5,3,3],[6,8,3,3],[6,5,3,3],[3,2,3,3],[6,2,3,3],[0,5,3,3],[0,8,3,3],[3,8,3,3],[9,9,1,10],[0,9,9,1]],"difficulty":"medium","clues":[[1,7,9],[4,4,9],[1,1,9],[2,9,9],[5,6,9],[7,8,9],[9,2,10],[8,5,9],[7,0,9],[3,1,9],[0,4,9]]},
      {"size":10,"squares":[[0,9,2,3],[2,9,2,4],[0,6,1,4],[1,6,1,2],[2,5,5,1],[1,4,4,1],[0,2,2,3],[1,3,6,1],[2,2,2,3],[4,2,1,3],[5,2,5,2],[5,0,5,1],[7,6,3,4],[5,4,2,1],[8,8,2,2],[7,9,3,1],[5,8,3,2],[4,9,3,1],[4,8,1,3],[5,6,2,1]],"difficulty":"medium","clues":[[1,8,6],[2,8,8],[1,6,2],[0,5,4],[3,4,4],[4,5,5],[4,6,3],[5,9,3],[6,8,6],[8,9,3],[8,8,4],[6,6,2],[6,4,2],[5,3,6],[4,1,3],[2,1,6],[1,1,6],[6,0,5],[7,2,10],[8,4,12]]},
      {"size":10,"squares":[[0,8,4,5],[0,3,6,4],[4,8,4,5],[0,9,10,1],[6,3,4,4],[8,8,2,5]],"difficulty":"medium","clues":[[4,9,10],[7,2,16],[1,5,20],[6,7,20],[9,6,10],[3,2,24]]},
      {"size":10,"squares":[[8,3,2,4],[4,3,4,4],[1,6,3,6],[0,0,4,1],[0,6,1,6],[0,9,3,3],[3,9,5,3],[8,9,2,6],[4,6,4,3]],"difficulty":"medium","clues":[[2,4,18],[4,8,15],[6,5,12],[9,6,12],[8,2,8],[5,1,16],[2,0,4],[1,8,9],[0,2,6]]},
      {"size":10,"squares":[[0,9,2,2],[0,7,3,3],[2,9,4,2],[0,4,4,3],[0,1,5,2],[4,7,3,5],[3,7,1,3],[6,9,3,2],[9,9,1,6],[7,7,2,4],[7,3,3,3],[5,0,5,1],[4,2,3,1],[5,1,2,1]],"difficulty":"medium","clues":[[9,0,5],[9,4,6],[4,9,8],[0,8,4],[2,0,10],[6,1,2],[5,2,3],[5,5,15],[1,6,9],[1,4,12],[3,6,3],[8,2,9],[8,4,8],[7,8,6]]},
      {"size":10,"squares":[[3,6,4,3],[7,7,1,6],[3,9,3,3],[6,9,1,3],[7,9,3,2],[8,7,2,3],[8,4,2,3],[4,1,6,2],[0,0,3,1],[0,5,2,5],[0,9,2,4],[2,9,1,9],[3,3,1,4],[4,3,3,2]],"difficulty":"medium","clues":[[1,4,10],[4,5,12],[5,8,9],[6,8,3],[7,6,6],[9,6,6],[9,3,6],[5,2,6],[2,0,3],[1,8,8],[2,9,9],[3,3,4],[9,1,12],[9,8,6]]},
      {"size":10,"squares":[[3,6,4,4],[1,9,6,3],[7,9,3,8],[3,1,7,2],[0,9,1,10],[1,6,2,4],[1,2,6,1],[1,1,2,2]],"difficulty":"medium","clues":[[0,6,10],[4,4,16],[3,2,6],[1,0,4],[8,6,24],[1,5,8],[4,8,18],[7,1,14]]},
      {"size":10,"squares":[[0,9,4,7],[0,1,10,2],[0,2,4,1],[4,9,6,8]],"difficulty":"medium","clues":[[1,2,4],[2,7,28],[5,6,48],[7,1,20]]},
      {"size":10,"squares":[[1,8,3,3],[6,8,3,3],[1,3,3,3],[6,3,3,3],[4,5,2,2],[0,0,4,1],[4,0,6,1],[9,6,1,6],[9,9,1,3],[5,9,4,1],[0,9,5,1],[0,8,1,3],[0,5,1,5],[1,5,2,2],[3,5,1,2],[4,8,1,3],[5,8,1,3],[4,1,2,1],[4,3,2,2],[6,5,3,1],[6,4,3,1]],"difficulty":"medium","clues":[[3,9,5],[7,9,4],[9,8,3],[7,6,9],[5,7,3],[4,7,3],[1,7,9],[0,7,3],[0,4,5],[1,5,4],[3,5,2],[5,5,4],[6,5,3],[7,4,3],[4,2,4],[2,2,9],[5,1,2],[7,2,9],[8,0,6],[2,0,4],[9,4,6]]},
      {"size":10,"squares":[[1,8,2,3],[3,8,3,4],[4,4,1,3],[2,4,2,3],[0,5,3,1],[0,9,6,1],[0,8,1,3],[6,9,3,3],[9,9,1,7],[8,2,2,3],[7,6,2,4],[6,6,1,4],[5,4,1,4],[6,2,2,3],[0,0,6,1],[0,1,5,1],[0,4,2,3]],"difficulty":"medium","clues":[[1,9,6],[0,7,3],[1,7,6],[1,5,3],[0,3,6],[3,3,6],[3,1,5],[3,0,6],[5,2,4],[4,3,3],[7,1,6],[6,4,4],[8,5,8],[9,5,7],[7,8,9],[4,7,12],[9,2,6]]},
      {"size":10,"squares":[[0,9,1,7],[0,2,3,1],[0,1,5,2],[3,5,2,4],[5,7,1,4],[6,7,2,2],[2,9,2,2],[1,7,3,2],[1,5,2,3],[4,9,1,4],[1,9,1,2],[5,9,5,1],[5,8,3,1],[8,8,2,4],[6,4,1,5],[5,3,1,4],[6,5,2,1],[7,4,3,2],[7,2,3,3]],"difficulty":"medium","clues":[[0,9,7],[1,9,2],[2,1,10],[3,4,8],[2,7,6],[1,4,6],[3,8,4],[4,8,4],[6,9,5],[6,8,3],[5,6,4],[7,7,4],[9,7,8],[7,5,2],[8,3,6],[6,3,5],[5,1,4],[1,2,3],[9,0,9]]},
      {"size":10,"squares":[[2,9,5,2],[7,9,2,4],[9,9,1,6],[8,3,2,4],[0,9,1,4],[1,9,1,7],[0,5,1,6],[1,2,2,3],[2,7,2,5],[6,2,2,3],[6,5,3,2],[4,7,3,2],[4,3,4,1],[4,5,2,2],[3,2,3,3]],"difficulty":"medium","clues":[[0,7,4],[0,4,6],[1,1,6],[3,5,10],[4,9,10],[5,6,6],[8,8,8],[9,7,6],[8,4,6],[5,4,4],[6,3,4],[7,1,6],[9,2,8],[1,9,7],[3,2,9]]},
      {"size":10,"squares":[[1,7,3,3],[0,9,1,5],[1,9,5,2],[0,4,5,2],[4,7,4,2],[6,9,4,2],[8,7,2,5],[4,5,4,1],[5,4,3,2],[2,2,4,2],[0,2,2,3],[6,2,4,3],[2,0,4,1]],"difficulty":"medium","clues":[[0,7,5],[2,8,10],[2,6,9],[1,3,10],[1,2,6],[4,1,8],[4,0,4],[7,1,12],[7,4,6],[8,4,10],[6,5,4],[6,6,8],[7,9,8]]},
      {"size":10,"squares":[[4,5,2,2],[3,5,1,3],[3,6,3,1],[6,6,1,3],[4,3,3,1],[4,2,2,3],[7,5,3,2],[4,9,2,3],[0,5,3,2],[1,3,2,2],[7,3,2,2],[6,8,2,2],[0,6,3,1],[7,6,3,1],[6,2,1,3],[3,2,1,3],[6,9,4,1],[2,8,2,2],[0,9,4,1],[9,3,1,4],[0,3,1,4],[8,8,2,2],[0,8,2,2],[1,1,2,2],[7,1,2,2]],"difficulty":"medium","clues":[[2,9,4],[1,8,4],[3,8,4],[5,8,6],[7,9,4],[8,6,3],[6,5,3],[5,6,3],[1,6,3],[1,4,6],[3,4,3],[5,4,4],[5,3,3],[8,4,6],[7,3,4],[9,2,4],[8,0,4],[4,1,6],[3,1,3],[1,1,4],[0,2,4],[6,0,3],[9,8,4],[2,2,4],[7,7,4]]},
      {"size":10,"squares":[[3,7,3,3],[3,9,3,2],[6,9,2,3],[8,9,2,2],[8,7,2,2],[6,6,2,3],[0,3,3,3],[0,5,3,2],[3,4,1,5],[5,4,1,5],[4,2,1,3],[4,4,1,2],[8,5,2,3],[0,0,3,1],[6,0,4,1],[8,2,2,2],[6,3,2,3],[2,9,1,4],[0,7,2,2],[0,9,2,2]],"difficulty":"medium","clues":[[0,9,4],[1,6,4],[4,8,6],[9,9,4],[9,7,4],[8,4,6],[7,2,6],[9,1,4],[5,1,5],[4,1,3],[3,3,5],[2,0,3],[1,2,9],[1,4,6],[7,9,6],[2,9,4],[4,3,2],[9,0,4],[4,6,9],[6,6,6]]},
      {"size":10,"squares":[[0,9,1,6],[3,9,1,8],[1,9,2,6],[0,3,3,2],[4,7,3,2],[4,5,3,4],[7,8,3,6],[1,1,6,2],[7,2,2,3],[9,2,1,3],[0,1,1,2],[4,9,6,1],[4,8,3,1]],"difficulty":"medium","clues":[[5,7,6],[5,4,12],[1,2,6],[0,1,2],[9,1,3],[7,6,18],[8,9,6],[4,8,3],[3,5,8],[0,5,6],[1,7,12],[3,1,12],[7,0,6]]},
      {"size":10,"squares":[[0,9,3,6],[0,3,6,4],[3,6,3,3],[7,9,3,9],[7,0,3,1],[6,9,1,10],[3,9,3,3]],"difficulty":"medium","clues":[[3,5,9],[4,7,9],[3,1,24],[8,0,3],[1,8,18],[8,4,27],[6,9,10]]},
      {"size":10,"squares":[[1,4,6,3],[7,3,3,3],[5,0,5,1],[0,1,7,1],[0,0,5,1],[0,6,1,5],[1,7,3,3],[0,9,1,3],[1,9,5,2],[7,9,3,3],[6,9,1,2],[7,6,2,3],[9,6,1,3],[5,7,2,3],[4,7,1,3]],"difficulty":"medium","clues":[[0,8,3],[2,6,9],[3,9,10],[5,6,6],[6,8,2],[8,9,9],[9,5,3],[8,2,9],[5,1,7],[3,0,5],[8,0,5],[6,3,18],[8,6,6],[4,5,3],[0,3,5]]},
      {"size":10,"squares":[[0,9,1,10],[9,9,1,10],[1,2,3,3],[6,9,3,3],[1,9,5,3],[4,2,5,3],[1,6,4,4],[5,6,4,4]],"difficulty":"medium","clues":[[2,8,15],[6,5,16],[9,5,10],[0,4,10],[3,4,16],[7,1,15],[2,1,9],[7,8,9]]},
      {"size":10,"squares":[[3,8,2,6],[6,8,3,3],[5,5,3,3],[5,8,1,3],[7,9,3,1],[2,9,5,1],[0,9,1,5],[1,9,1,7],[2,8,1,5],[2,3,1,4],[0,2,2,3],[0,4,1,2],[3,2,2,2],[3,0,4,1],[7,2,3,3],[8,5,2,3],[5,2,2,2],[9,8,1,3]],"difficulty":"medium","clues":[[8,9,3],[6,9,5],[5,7,3],[7,7,9],[9,7,3],[9,4,6],[5,1,4],[1,1,6],[0,3,2],[0,6,5],[8,2,9],[6,4,9],[4,5,12],[2,6,5],[1,9,7],[2,3,4],[4,2,4],[3,0,4]]},
      {"size":10,"squares":[[2,8,5,5],[2,3,7,4],[7,9,3,6],[0,9,2,8],[2,9,5,1],[9,3,1,4],[0,1,2,2]],"difficulty":"medium","clues":[[0,7,16],[4,9,5],[4,6,25],[8,6,18],[5,1,28],[0,0,4],[9,2,4]]},
      {"size":10,"squares":[[0,9,1,10],[1,8,1,9],[2,2,3,3],[2,5,3,3],[2,8,3,3],[1,9,9,1],[7,8,3,3],[5,5,3,3],[6,2,3,3],[8,5,2,3],[9,2,1,3],[5,2,1,3],[5,8,2,3]],"difficulty":"medium","clues":[[0,6,10],[3,7,9],[5,7,6],[3,4,9],[3,1,9],[5,1,3],[9,2,3],[9,4,6],[8,7,9],[6,4,9],[7,1,9],[1,1,9],[7,9,9]]},
      {"size":10,"squares":[[2,7,4,4],[6,3,4,4],[6,7,2,4],[2,3,4,2],[2,1,4,2],[8,7,2,4],[6,9,4,2],[2,9,4,2],[0,3,2,4],[0,7,2,4],[0,9,2,2]],"difficulty":"medium","clues":[[1,8,4],[4,8,8],[0,6,8],[7,8,8],[9,6,8],[4,2,8],[0,2,8],[8,1,16],[6,5,8],[3,6,16],[2,0,8]]},
      {"size":10,"squares":[[2,7,2,3],[4,6,1,2],[1,4,5,2],[0,9,6,1],[1,8,5,1],[0,8,1,5],[1,7,1,3],[0,3,1,4],[1,2,3,3],[4,1,3,2],[4,2,6,1],[7,1,3,1],[7,0,3,1],[9,9,1,7],[4,7,5,1],[6,9,3,2],[5,6,2,2],[7,6,2,4],[6,4,1,2]],"difficulty":"medium","clues":[[3,9,6],[3,8,5],[1,6,3],[0,5,5],[0,2,4],[3,5,6],[4,6,2],[5,7,5],[6,5,4],[7,9,6],[9,7,7],[8,5,8],[8,1,3],[6,0,6],[6,4,2],[2,0,9],[5,2,6],[2,4,10],[9,0,3]]},
      {"size":10,"squares":[[1,9,1,6],[0,3,3,4],[0,9,1,6],[2,7,7,4],[2,9,8,2],[9,7,1,8],[3,3,4,4],[7,3,2,4]],"difficulty":"medium","clues":[[3,6,28],[1,2,12],[4,1,16],[7,1,8],[9,5,8],[0,8,6],[1,7,6],[6,8,16]]},
      {"size":10,"squares":[[1,7,8,2],[0,4,10,1],[1,3,8,2],[0,5,7,1],[7,5,3,1],[9,9,1,4],[5,9,4,2],[0,9,5,2],[0,7,1,2],[0,3,1,4],[1,1,4,2],[5,1,5,2],[9,3,1,2]],"difficulty":"medium","clues":[[4,9,10],[3,6,16],[6,8,8],[9,7,4],[0,7,2],[1,5,7],[2,4,10],[8,5,3],[9,2,2],[5,3,16],[2,1,8],[0,2,4],[7,1,10]]},
      {"size":10,"squares":[[0,6,6,3],[2,3,6,4],[6,7,4,4],[4,9,2,3],[0,3,2,4],[8,3,2,4],[6,9,4,2],[0,9,4,3]],"difficulty":"medium","clues":[[2,8,12],[7,8,8],[7,6,16],[5,2,24],[9,2,8],[1,1,8],[3,5,18],[4,9,6]]},
      {"size":10,"squares":[[0,9,1,4],[1,9,5,1],[1,8,3,3],[0,4,2,3],[0,1,6,2],[2,4,4,3],[0,5,10,1],[4,7,4,2],[6,9,4,1],[8,8,2,3],[4,8,4,1],[6,4,2,5],[8,4,2,2],[8,2,2,3]],"difficulty":"medium","clues":[[0,8,4],[5,7,8],[6,8,4],[8,9,4],[9,6,6],[9,3,4],[6,3,10],[3,3,12],[1,3,6],[3,0,12],[8,1,6],[4,5,10],[2,9,5],[2,6,9]]},
      {"size":10,"squares":[[0,9,2,4],[2,9,2,4],[4,9,1,9],[0,0,5,1],[0,1,4,1],[0,5,4,4],[5,9,3,4],[8,9,2,7],[5,2,5,3],[5,5,3,3]],"difficulty":"hard","clues":[[0,6,8],[3,6,8],[1,5,16],[4,7,9],[3,1,4],[3,0,5],[6,1,15],[6,5,9],[6,8,12],[8,4,14]]},
      {"size":10,"squares":[[0,9,9,1],[9,9,1,9],[1,0,9,1],[0,8,1,9],[1,3,3,3],[6,3,3,3],[6,8,3,3],[1,8,3,3],[1,5,8,2],[4,8,2,3],[4,3,2,3]],"difficulty":"hard","clues":[[3,9,9],[2,7,9],[5,6,6],[7,7,9],[9,6,9],[6,4,16],[5,2,6],[3,2,9],[7,2,9],[5,0,9],[0,2,9]]},
      {"size":10,"squares":[[0,9,4,10],[4,9,6,4],[5,5,5,6],[4,5,1,6]],"difficulty":"hard","clues":[[1,6,40],[6,8,24],[4,1,6],[7,3,30]]},
      {"size":10,"squares":[[0,9,3,3],[0,6,4,4],[3,9,7,3],[0,2,10,3],[4,6,6,4]],"difficulty":"hard","clues":[[2,7,9],[0,4,16],[3,1,30],[8,8,21],[5,5,24]]},
      {"size":10,"squares":[[0,9,3,4],[3,9,3,10],[0,5,3,6],[6,9,4,3],[6,6,4,3],[6,3,4,4]],"difficulty":"hard","clues":[[1,4,18],[7,8,12],[6,3,16],[4,2,30],[8,6,12],[2,7,12]]},
      {"size":10,"squares":[[7,8,2,2],[5,9,5,1],[9,8,1,4],[7,6,2,3],[9,4,1,4],[6,3,3,3],[6,6,1,3],[5,7,1,5],[6,8,1,2],[3,8,3,1],[4,5,1,3],[3,4,1,2],[3,2,3,1],[6,0,4,1],[2,1,4,2],[0,2,2,3],[2,5,1,4],[4,7,1,2],[3,6,1,2],[0,7,4,1],[0,6,3,1],[0,4,2,2],[0,5,2,1],[0,8,3,1],[0,9,5,1]],"difficulty":"hard","clues":[[1,6,3],[2,4,4],[4,6,2],[3,5,2],[0,5,2],[2,7,4],[3,8,3],[0,8,3],[4,9,5],[1,3,4],[1,0,6],[2,1,8],[3,2,3],[3,3,2],[4,3,3],[5,4,5],[6,5,3],[6,7,2],[7,9,5],[8,4,6],[7,3,9],[8,0,4],[9,1,4],[7,7,4],[9,7,4]]},
      {"size":10,"squares":[[1,8,3,3],[0,9,1,4],[1,9,3,1],[4,8,2,2],[4,6,2,2],[1,5,3,4],[4,4,5,2],[6,8,2,4],[4,9,6,1],[8,8,2,4],[9,4,1,5],[6,2,3,3],[1,1,5,2],[4,2,2,1],[0,5,1,6]],"difficulty":"hard","clues":[[0,7,4],[3,7,9],[8,6,8],[5,5,4],[4,2,2],[2,3,12],[2,9,3],[5,9,6],[5,7,4],[7,3,10],[2,0,10],[0,4,6],[7,8,8],[9,4,5],[7,1,9]]},
      {"size":10,"squares":[[1,6,5,2],[6,8,3,5],[3,3,4,3],[0,9,4,2],[0,7,3,1],[3,7,3,1],[0,6,1,5],[2,4,4,1],[1,4,1,3],[0,1,2,2],[2,3,1,4],[3,0,7,1],[7,3,2,3],[9,9,1,9],[6,9,3,1],[4,9,2,2]],"difficulty":"hard","clues":[[6,9,3],[9,9,9],[4,7,3],[5,8,4],[2,8,8],[1,7,3],[0,5,5],[1,3,3],[8,1,6],[6,3,12],[4,5,10],[8,7,15],[2,4,4],[2,1,4],[1,0,4],[5,0,7]]},
      {"size":10,"squares":[[3,7,2,3],[5,7,3,3],[0,9,4,2],[0,7,3,2],[0,5,3,4],[0,1,6,2],[3,4,4,2],[3,2,6,1],[6,1,4,2],[9,5,1,4],[7,4,2,2],[8,7,1,3],[4,9,3,2],[9,9,1,4],[7,9,2,2]],"difficulty":"hard","clues":[[2,8,8],[9,8,4],[8,6,3],[6,6,9],[5,3,8],[8,4,4],[9,3,4],[7,2,6],[8,0,8],[4,0,12],[1,2,12],[1,6,6],[3,5,6],[7,9,4],[4,9,6]]},
      {"size":10,"squares":[[0,9,9,1],[1,2,3,3],[0,8,1,9],[1,8,3,3],[9,9,1,6],[8,3,2,4],[6,7,3,2],[4,8,5,1],[4,7,2,2],[1,5,8,1],[1,4,5,2],[6,4,3,1],[6,3,2,4],[4,2,2,3]],"difficulty":"hard","clues":[[0,0,9],[0,9,9],[2,7,9],[6,8,5],[7,6,6],[3,5,8],[5,0,6],[1,3,10],[3,2,9],[9,7,6],[8,4,3],[8,1,8],[6,3,8],[4,6,4]]},
      {"size":10,"squares":[[5,7,2,3],[4,7,1,5],[5,4,1,4],[6,4,1,3],[7,7,2,4],[4,9,5,2],[1,9,3,3],[0,9,1,6],[1,6,2,2],[3,6,1,5],[1,4,2,2],[0,3,1,4],[1,2,2,3],[4,2,1,3],[3,1,1,2],[5,0,5,1],[9,9,1,3],[9,6,1,6],[7,3,2,2],[6,1,3,1]],"difficulty":"hard","clues":[[0,8,6],[9,8,3],[6,6,6],[2,6,4],[0,2,4],[2,3,4],[1,1,6],[5,3,4],[4,1,3],[3,0,2],[7,1,3],[8,3,4],[8,5,8],[9,4,6],[2,8,9],[6,8,10],[4,5,5],[3,4,5],[8,0,5],[6,4,3]]},
      {"size":10,"squares":[[2,8,4,5],[7,9,3,3],[6,9,1,10],[2,3,3,2],[0,9,2,7],[0,2,2,3],[2,1,3,2],[5,3,1,4],[2,9,4,1],[7,6,3,5],[7,1,3,2]],"difficulty":"hard","clues":[[3,9,4],[3,0,6],[5,2,4],[6,6,10],[7,0,6],[3,3,6],[0,2,6],[0,7,14],[2,5,20],[7,8,9],[8,3,15]]},
      {"size":10,"squares":[[1,8,4,3],[0,9,6,1],[5,8,4,4],[2,5,3,3],[5,4,4,4],[0,2,5,3],[0,5,2,3],[0,8,1,3],[9,8,1,9],[5,0,4,1],[6,9,4,1]],"difficulty":"hard","clues":[[0,4,6],[0,7,3],[4,4,9],[3,1,15],[7,2,16],[7,0,4],[7,9,4],[9,5,9],[6,7,16],[2,6,12],[3,9,6]]},
      {"size":10,"squares":[[2,6,2,2],[4,8,1,3],[5,7,2,2],[4,5,1,4],[5,4,2,2],[3,4,1,2],[2,4,1,5],[3,2,1,3],[4,1,4,2],[7,4,3,1],[8,3,2,3],[7,3,1,2],[5,2,2,1],[7,8,3,3],[1,8,1,5],[1,3,1,4],[0,9,5,1],[2,8,2,2],[5,9,5,1],[5,8,2,1],[5,5,5,1],[8,0,2,1],[0,8,1,4],[0,4,1,5]],"difficulty":"hard","clues":[[2,9,5],[8,9,5],[8,7,9],[5,8,2],[5,7,4],[4,7,3],[3,8,4],[1,7,5],[0,6,4],[0,3,5],[1,2,4],[2,3,5],[3,6,4],[3,4,2],[3,1,3],[4,3,4],[5,3,4],[6,5,5],[8,4,3],[7,3,2],[6,2,2],[6,0,8],[9,2,6],[9,0,2]]},
      {"size":10,"squares":[[1,8,3,3],[2,4,3,2],[0,5,8,1],[8,9,1,8],[5,8,2,3],[0,9,8,1],[0,8,1,3],[4,8,1,3],[7,8,1,3],[0,4,2,5],[2,2,3,2],[2,0,8,1],[9,7,1,7],[5,1,4,1],[5,4,3,3],[9,9,1,2]],"difficulty":"hard","clues":[[3,9,8],[4,7,3],[7,7,3],[3,3,6],[7,1,4],[5,0,8],[6,3,9],[5,5,8],[9,8,2],[9,3,7],[8,5,8],[0,2,10],[1,7,9],[0,6,3],[6,8,6],[2,1,6]]},
      {"size":10,"squares":[[3,8,2,2],[5,6,1,3],[5,7,4,1],[3,5,1,5],[4,3,3,3],[4,6,1,3],[0,6,4,1],[0,8,3,2],[0,9,6,1],[6,9,4,1],[5,8,5,1],[9,7,1,4],[6,6,3,2],[6,4,3,1],[7,3,3,2],[7,1,3,2],[0,0,7,1],[0,4,3,2],[0,5,3,1],[0,2,3,2]],"difficulty":"hard","clues":[[3,9,6],[1,7,6],[4,7,4],[6,8,5],[8,9,4],[8,7,4],[9,6,4],[8,5,6],[7,4,3],[5,5,3],[4,5,3],[2,5,3],[3,6,4],[1,4,6],[3,3,5],[1,1,6],[5,2,9],[9,2,6],[8,1,6],[5,0,7]]},
      {"size":10,"squares":[[0,9,2,4],[0,5,5,2],[2,7,3,2],[5,7,4,2],[5,5,4,4],[6,9,4,2],[2,9,4,2],[3,3,2,4],[0,3,3,2],[0,1,3,2],[9,7,1,8],[5,1,4,2]],"difficulty":"hard","clues":[[0,8,8],[4,8,8],[3,6,6],[5,6,8],[7,8,8],[9,6,8],[8,3,16],[3,5,10],[1,3,6],[2,0,6],[4,2,8],[7,0,8]]},
      {"size":10,"squares":[[4,7,2,5],[1,6,3,2],[1,4,3,2],[1,2,7,2],[6,7,2,5],[1,9,7,2],[0,9,1,5],[1,7,3,1],[0,4,1,5],[1,0,9,1],[8,3,2,3],[9,9,1,6],[8,9,1,2],[8,7,1,4]],"difficulty":"hard","clues":[[8,8,2],[9,8,6],[2,4,6],[2,6,6],[0,3,5],[9,0,9],[8,3,6],[4,1,14],[5,5,10],[0,5,5],[2,9,14],[1,7,3],[8,6,4],[7,4,10]]},
      {"size":10,"squares":[[3,6,4,4],[7,6,3,2],[8,9,2,3],[7,9,1,3],[7,4,3,1],[3,9,4,1],[3,8,4,2],[5,2,2,3],[3,2,2,3],[9,3,1,4],[7,3,2,4],[0,9,3,2],[0,7,1,5],[1,7,2,4],[1,3,2,1],[0,2,3,3]],"difficulty":"hard","clues":[[1,8,6],[2,5,8],[0,5,5],[1,3,2],[1,1,9],[4,4,16],[5,7,8],[9,8,6],[8,6,6],[8,2,8],[9,1,4],[5,1,6],[4,9,4],[7,9,3],[7,4,3],[3,2,6]]},
      {"size":10,"squares":[[8,9,2,2],[7,9,1,4],[0,9,7,1],[0,8,1,9],[1,0,9,1],[8,7,2,5],[6,2,4,2],[6,5,2,3],[3,8,4,3],[1,8,2,4],[3,5,3,3],[1,2,5,2],[1,4,2,2]],"difficulty":"hard","clues":[[2,7,8],[5,7,12],[7,8,4],[9,9,4],[9,5,10],[7,4,6],[4,3,9],[1,3,4],[7,1,8],[6,0,9],[3,9,7],[2,1,10],[0,6,9]]},
      {"size":10,"squares":[[0,9,2,7],[2,9,5,3],[3,6,2,3],[2,6,1,4],[3,3,3,3],[5,6,3,3],[7,9,3,3],[8,6,2,7],[6,3,2,4],[0,0,6,1],[0,2,3,2]],"difficulty":"hard","clues":[[1,7,14],[2,5,4],[4,5,6],[6,5,9],[4,2,9],[6,1,8],[4,0,6],[1,2,6],[9,5,14],[4,9,15],[7,7,9]]},
      {"size":10,"squares":[[1,9,3,4],[4,8,5,2],[4,6,4,3],[1,4,3,2],[4,3,4,3],[0,5,4,1],[0,9,1,4],[0,4,1,5],[1,0,9,1],[1,2,3,2],[8,4,2,4],[8,6,2,2],[9,9,1,3],[4,9,5,1]],"difficulty":"hard","clues":[[0,7,4],[2,8,12],[6,7,10],[6,5,12],[9,3,8],[2,4,6],[0,3,5],[5,3,12],[8,0,9],[9,6,4],[9,8,3],[7,9,5],[1,5,4],[3,1,6]]},
      {"size":10,"squares":[[0,8,3,3],[0,5,3,3],[3,6,2,4],[5,7,4,4],[6,9,4,2],[0,9,3,1],[3,9,3,2],[3,7,2,1],[0,2,5,1],[0,1,4,2],[4,1,3,2],[7,1,3,2],[5,3,5,2],[9,7,1,4]],"difficulty":"hard","clues":[[1,7,9],[1,9,3],[4,9,6],[4,7,2],[7,8,8],[7,6,16],[9,6,4],[4,5,8],[1,3,9],[2,2,5],[2,0,8],[8,0,6],[6,3,10],[4,1,6]]},
      {"size":10,"squares":[[3,8,3,3],[6,8,2,3],[3,4,4,1],[1,5,7,1],[7,4,2,3],[8,8,2,4],[2,9,8,1],[0,9,2,3],[2,8,1,2],[0,6,3,1],[0,5,1,4],[1,4,2,3],[0,1,4,2],[3,3,4,2],[4,0,4,1],[8,1,2,2],[4,1,4,1],[9,4,1,3]],"difficulty":"hard","clues":[[1,8,6],[7,7,6],[1,6,3],[2,5,7],[1,3,6],[4,4,4],[8,3,6],[9,3,3],[7,0,4],[2,0,8],[5,1,4],[6,3,8],[9,1,4],[4,7,9],[2,7,2],[5,9,8],[9,8,8],[0,2,4]]},
      {"size":10,"squares":[[0,9,7,4],[3,5,7,6],[8,9,2,4],[7,9,1,4],[0,5,3,6]],"difficulty":"hard","clues":[[7,8,4],[1,2,18],[1,7,28],[5,3,42],[9,6,8]]},
      {"size":10,"squares":[[0,9,7,4],[0,5,6,6],[7,9,3,10],[6,5,1,6]],"difficulty":"hard","clues":[[8,2,30],[5,8,28],[6,4,6],[2,2,36]]},
      {"size":10,"squares":[[0,9,3,4],[2,5,4,4],[3,9,6,4],[9,9,1,6],[0,1,10,2],[6,3,4,2],[6,5,3,2],[0,5,2,4]],"difficulty":"hard","clues":[[1,7,12],[3,4,16],[0,3,8],[7,5,6],[9,6,6],[8,2,8],[5,1,20],[4,8,24]]},
      {"size":10,"squares":[[1,8,5,4],[1,9,9,1],[6,8,4,4],[1,4,5,2],[6,4,4,5],[1,2,5,3],[0,9,1,4],[0,5,1,6]],"difficulty":"hard","clues":[[3,3,10],[7,6,16],[0,8,4],[0,4,6],[8,2,20],[4,0,15],[4,7,20],[2,9,9]]},
      {"size":10,"squares":[[0,9,9,4],[9,9,1,6],[0,5,9,2],[0,3,4,4],[4,3,6,4]],"difficulty":"hard","clues":[[9,7,6],[6,4,18],[1,1,16],[1,7,36],[5,1,24]]},
      {"size":10,"squares":[[1,9,4,3],[2,6,2,5],[5,6,2,4],[6,9,4,2],[5,7,5,1],[5,9,1,2],[4,6,1,6],[7,6,3,7],[5,2,2,3],[0,0,5,1],[0,1,4,1],[0,9,1,8],[1,6,1,5]],"difficulty":"hard","clues":[[3,8,12],[5,8,2],[7,9,8],[7,7,5],[5,5,8],[8,4,21],[6,1,6],[4,3,6],[3,4,10],[0,4,8],[2,1,4],[1,5,5],[4,0,5]]}
];
// Format: clues: [x, y, number], squares: [x,y,width,height]
// to draw square, (x,y) is lower left
var TUTORIAL = {"size":5,"difficulty":"tutorial","clues":[[1,1,6],[3,1,9],[1,4,4],[4,3,6]],"squares":[]};

/*jslint sloppy: true */
/*globals Arcadia, window, document, localStorage */

Arcadia.isLocked = function () {
    return window.store !== undefined && localStorage.getBoolean('unlocked') === false;
};

Arcadia.cycleBackground = function () {
    var TOTAL_BACKGROUNDS = 6,
        backgroundCounter;

    backgroundCounter = parseInt(localStorage.getItem('backgroundCounter'), 10) || 1;

    backgroundCounter += 1;

    if (backgroundCounter > TOTAL_BACKGROUNDS) {
        backgroundCounter = 1;
    }

    localStorage.setItem('backgroundCounter', backgroundCounter);
    document.body.style['background-image'] = 'url("assets/images/background_' + backgroundCounter + '.png")';
};

// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return value;
      }
    }
    return undefined;
  };
}

(function () {
    Storage.namespace = 'shikaku';

    var originalGetItem = Storage.prototype.getItem,
        originalSetItem = Storage.prototype.setItem;

    Storage.prototype.setItem = function (key, value) {
        key = this.namespace(key);
        return originalSetItem.apply(this, arguments);
    };

    Storage.prototype.getItem = function (key) {
        key = this.namespace(key);
        return originalGetItem.apply(this, arguments);
    };

    Storage.prototype.namespace = function (key) {
        return Storage.namespace + ':' + key;
    };

    Storage.prototype.setObject = function (key, value) {
        this.setItem(key, JSON.stringify(value));
    };

    Storage.prototype.getObject = function (key) {
        var value = this.getItem(key);

        if (value) {
            return JSON.parse(value);
        }

        return null;
    };

    Storage.prototype.setBoolean = function (key, value) {
        this.setItem(key, !!value);
    };

    Storage.prototype.getBoolean = function (key) {
        return this.getItem(key) == 'true';
    };
})();

var Clue = function (args) {
    Arcadia.Shape.apply(this, arguments);

    this.size = { width: Clue.SIZE, height: Clue.SIZE };
    this.vertices = 0;
    this.color = null;
    this.border = '2px white';
    this.number = 0;

    if (args.hasOwnProperty('number')) {
        this.number = args.number;
    }

    this.label = new Arcadia.Label({
        font: '24px monospace',
        text: this.number
    });
    this.add(this.label);
};

Clue.prototype = new Arcadia.Shape();

Clue.SIZE = 33; // 375 / 10 = 37.5

/*jslint sloppy: true */
/*globals Arcadia, window, console, localStorage, sona */

var Grid = function (options) {
    Arcadia.Shape.apply(this, arguments);

    this.cellCount = options.size;
    this.cellSize = Grid.CELL_SIZE;

    this.size = {
        width: this.cellSize * this.cellCount,
        height: this.cellSize * this.cellCount
    };

    this.color = null;
    this.border = '2px white';

    this.calculateBounds();

    this.lines = new Arcadia.Shape({
        size: {
            width: this.size.width,
            height: this.size.height
        }
    });

    var self = this;

    this.lines.path = function (context) {
        var i,
            left,
            right,
            top,
            bottom;

        left = -self.size.width / 2;
        right = self.size.width / 2;
        top = -self.size.height / 2;
        bottom = self.size.height / 2;

        for (i = 0; i <= self.cellCount; i += 1) {
            // Horizontal lines
            context.moveTo(left * Arcadia.PIXEL_RATIO, (bottom - self.cellSize * i) * Arcadia.PIXEL_RATIO);
            context.lineTo(right * Arcadia.PIXEL_RATIO, (bottom - self.cellSize * i) * Arcadia.PIXEL_RATIO);

            // Vertical lines
            context.moveTo((right - self.cellSize * i) * Arcadia.PIXEL_RATIO, top * Arcadia.PIXEL_RATIO);
            context.lineTo((right - self.cellSize * i) * Arcadia.PIXEL_RATIO, bottom * Arcadia.PIXEL_RATIO);
        }

        // Draw grid
        context.lineWidth = 2 * Arcadia.PIXEL_RATIO;
        context.strokeStyle = 'white';
        context.stroke();
    };
    this.add(this.lines);
};

Grid.prototype = new Arcadia.Shape();

Grid.MAX_SIZE = 372;
Grid.CELL_SIZE = Grid.MAX_SIZE / 10;

Grid.prototype.containsPoint = function (point) {
    return point.x < this.bounds.right &&
        point.x > this.bounds.left &&
        point.y < this.bounds.bottom &&
        point.y > this.bounds.top;
};

Grid.prototype.getRowAndColumn = function (point) {
    if (!this.containsPoint(point)) {
        return [null, null];
    }

    var row, column;

    row = Math.floor((point.y - this.bounds.top) / this.cellSize);
    column = Math.floor((point.x - this.bounds.left) / this.cellSize);

    return [row, column];
};

Grid.prototype.calculateBounds = function () {
    var right = this.size.width / 2,
        bottom = this.size.height / 2;

    // Get bounds of user interactive area
    this.bounds = {
        right: right + this.position.x,
        left: (right - (this.cellSize * this.cellCount)) + this.position.x,
        bottom: bottom + this.position.y,
        top: (bottom - (this.cellSize * this.cellCount)) + this.position.y
    };
};

Grid.prototype.resize = function (newCellCount) {
    // Do nothing if passed a bogus arg
    newCellCount = newCellCount || this.cellCount;

    this.cellCount = newCellCount;

    this.size = {
        width: this.cellSize * this.cellCount,
        height: this.cellSize * this.cellCount
    };

    // Also resize the grid lines
    this.lines.size = this.size;

    this.calculateBounds();
};

var Square = function (options) {
    Arcadia.Shape.apply(this, arguments);

    this.color = 'rgba(255, 255, 255, 0.1)';
    this.border = '2px white';
};

Square.prototype = new Arcadia.Shape();

Square.prototype.path = function (context) {
    var cornerRadius = 20;

    context.beginPath();
    context.fillStyle = this.color;
    context.strokeStyle = 'darkred';
    context.lineWidth = 2 * Arcadia.PIXEL_RATIO;

    var topLeftX = (-this.size.width / 2 + cornerRadius) * Arcadia.PIXEL_RATIO,
        topLeftY = -this.size.height / 2 * Arcadia.PIXEL_RATIO,
        topRightX = (this.size.width / 2 - cornerRadius) * Arcadia.PIXEL_RATIO,
        topRightY = -this.size.height / 2 * Arcadia.PIXEL_RATIO,
        rightTopX = this.size.width / 2 * Arcadia.PIXEL_RATIO,
        rightTopY = (-this.size.height / 2 + cornerRadius) * Arcadia.PIXEL_RATIO,
        rightBottomX = this.size.width / 2 * Arcadia.PIXEL_RATIO,
        rightBottomY = (this.size.height / 2 - cornerRadius) * Arcadia.PIXEL_RATIO,
        bottomRightX = (this.size.width / 2 - cornerRadius) * Arcadia.PIXEL_RATIO,
        bottomRightY = this.size.height / 2 * Arcadia.PIXEL_RATIO,
        bottomLeftX = (-this.size.width / 2 + cornerRadius) * Arcadia.PIXEL_RATIO,
        bottomLeftY = this.size.height / 2 * Arcadia.PIXEL_RATIO,
        leftBottomX = -this.size.width / 2 * Arcadia.PIXEL_RATIO,
        leftBottomY = (this.size.height / 2 - cornerRadius) * Arcadia.PIXEL_RATIO,
        leftTopX = -this.size.width / 2 * Arcadia.PIXEL_RATIO,
        leftTopY = (-this.size.height / 2 + cornerRadius) * Arcadia.PIXEL_RATIO;

    context.moveTo(topLeftX, topLeftY);
    context.lineTo(topRightX, topRightY);

    context.quadraticCurveTo(this.size.width / 2 * Arcadia.PIXEL_RATIO, -this.size.height / 2 * Arcadia.PIXEL_RATIO, rightTopX, rightTopY);

    context.lineTo(rightBottomX, rightBottomY);

    context.quadraticCurveTo(this.size.width / 2 * Arcadia.PIXEL_RATIO, this.size.height / 2 * Arcadia.PIXEL_RATIO, bottomRightX, bottomRightY);

    context.lineTo(bottomLeftX, bottomLeftY);

    context.quadraticCurveTo(-this.size.width / 2 * Arcadia.PIXEL_RATIO, this.size.height / 2 * Arcadia.PIXEL_RATIO, leftBottomX, leftBottomY);

    context.lineTo(leftTopX, leftTopY);

    context.quadraticCurveTo(-this.size.width / 2 * Arcadia.PIXEL_RATIO, -this.size.height / 2 * Arcadia.PIXEL_RATIO, topLeftX, topLeftY);

    context.fill();
    context.stroke();
};

/*jslint sloppy: true */
/*globals Arcadia, window, LEVELS, INCOMPLETE */

var Thumbnail = function () {
    Arcadia.Shape.apply(this, arguments);

    this.size = {
        width: Thumbnail.SIZE,
        height: Thumbnail.SIZE
    };

    this.border = '2px white';
    this.color = null;

    this.pixels = new Arcadia.Shape({
        size: {
            width: this.size.width,
            height: this.size.height
        }
    });

    this.pixels.path = function (context) {
        var pixelSize,
            originX,
            originY,
            self = this;

        if (!this.clues) {
            return;
        }

        pixelSize = this.size.width / this.puzzleSize * Arcadia.PIXEL_RATIO;
        originX = -self.size.width / 2 * Arcadia.PIXEL_RATIO;
        originY = -self.size.height / 2 * Arcadia.PIXEL_RATIO;

        context.fillStyle = 'white';
        
        this.clues.forEach(function (clue, index) {
            var x = clue[0],
                y = clue[1];

            context.beginPath();
            context.arc(originX + (x * pixelSize) + pixelSize / 2,
                        originY + (y * pixelSize) + pixelSize / 2,
                        pixelSize / 2,
                        0,
                        Math.PI * 2);
            context.closePath();
            context.fill();
        });
    };

    this.add(this.pixels);
};

Thumbnail.prototype = new Arcadia.Shape();

Thumbnail.SIZE = 75;

Thumbnail.prototype.drawPreview = function (levelIndex, _completed) {
    if (LEVELS[levelIndex] === undefined) {
        this.alpha = 0;
        return;
    }

    if (this.alpha < 1) {
        this.alpha = 1;
    }

    this.pixels.puzzleSize = LEVELS[levelIndex].size;
    this.pixels.clues = LEVELS[levelIndex].clues;
    this.pixels.dirty = true;
};

Thumbnail.prototype.highlight = function () {
    // this._border.width = 4;
    // this.dirty = true;
    this.scale = 1.15;
};

Thumbnail.prototype.lowlight = function () {
    // this._border.width = 2;
    // this.dirty = true;
    this.scale = 1;
};

/*jslint sloppy: true */
/*globals Arcadia, window, console, localStorage, sona, Grid */

var EditorScene = function () {
    Arcadia.Scene.apply(this);

    /*
     * Idears: button to determine current action: draw square or place clue
        * drawing/erasing squares is the same as the game
        * w/ clues, touch to place/delete, need to place inside a square; area
          gives the "number" of the clue, can't place outside a square
     */

    this.gridCount = this.MAX_GRID_COUNT = 10;
    this.MIN_GRID_COUNT = 5;
    this.verticalPadding = 81;

    // Puzzle grid
    this.grid = new Grid({
        size: this.gridCount,
        position: {
            x: 0,
            y: this.size.height / 2 - Grid.MAX_SIZE / 2 - this.verticalPadding
        }
    });
    this.add(this.grid);

    this.drawUi();
};

EditorScene.prototype = new Arcadia.Scene();

EditorScene.prototype.save = function () {
    var userPuzzles = localStorage.getObject('userPuzzles') || [];
    /* 
        Puzzle data format: {
            "size":5,
            "difficulty":"tutorial",
            "clues":[[x,y,number],[3,1,9],[1,4,4],[4,3,6]],
            "squares":[[x, y, width, height]] // (x,y) is lower left
        };
    */
    localStorage.setObject('userPuzzles', userPuzzles);
};

EditorScene.prototype.drawUi = function () {
    var biggerButton,
        smallerButton,
        padding = 10,
        self = this;

    smallerButton = new Arcadia.Button({
        color: 'white',
        border: '2px black',
        shadow: '5px 5px 0 rgba(0, 0, 0, 0.5)',
        label: new Arcadia.Label({
            color: 'black',
            text: 'smaller',
            font: '20px sans-serif'
        }),
        size: { width: Grid.MAX_SIZE / 2 - padding, height: 40 },
        action: function () {
            sona.play('button');
            if (self.gridCount > self.MIN_GRID_COUNT) {
                self.gridCount -= 1;
            }
            self.grid.resize(self.gridCount);
        }
    });
    smallerButton.position =  {
        x: smallerButton.size.width / 2 + padding / 2,
        y: -this.size.height / 2 + smallerButton.size.height / 2 + this.verticalPadding
    };
    this.add(smallerButton);

    biggerButton = new Arcadia.Button({
        color: 'white',
        border: '2px black',
        shadow: '5px 5px 0 rgba(0, 0, 0, 0.5)',
        label: new Arcadia.Label({
            color: 'black',
            text: 'bigger',
            font: '20px sans-serif'
        }),
        size: { width: Grid.MAX_SIZE / 2 - padding, height: 40 },
        action: function () {
            sona.play('button');
            if (self.gridCount < self.MAX_GRID_COUNT) {
                self.gridCount += 1;
            }
            self.grid.resize(self.gridCount);
        }
    });
    biggerButton.position =  {
        x: -biggerButton.size.width / 2 - padding / 2,
        y: -this.size.height / 2 + biggerButton.size.height / 2 + this.verticalPadding
    };
    this.add(biggerButton);
};

/*jslint sloppy: true */
/*globals Arcadia, window, console, localStorage, sona */

var GameScene = function (options) {
    Arcadia.Scene.apply(this, arguments);

    options = options || {};

    Arcadia.cycleBackground();

    this.tutorial = options.tutorial || false;
    this.tutorialStep = 1;
    this.level = options.level || 0;
    this.ignoreInput = false;
    this.timer = 0;
    this.verticalPadding = 77;
    this.drawUi();

    if (this.tutorial) {
        this.levelData = TUTORIAL;
    } else {
        this.levelData = LEVELS[this.level];
    }

    // Puzzle grid
    this.grid = new Grid({
        size: this.levelData.size,
        position: {
            x: 0,
            y: this.size.height / 2 - Grid.MAX_SIZE / 2 - this.verticalPadding
        }
    });
    this.add(this.grid);

    // Clues
    this.clues = [];
    this.drawClues();

    // Squares
    this.squares = [];

    this.activeSquare = new Square({
        alpha: 0
    });
    this.add(this.activeSquare);

    this.hintSquare = new Square({
        alpha: 0
    });
    this.add(this.hintSquare);

    if (this.tutorial) {
        this.activate(this.tutorialLabelBackground);
        this.displayTutorial();
    }
};

GameScene.prototype = new Arcadia.Scene();

GameScene.prototype.update = function (delta) {
    Arcadia.Scene.prototype.update.call(this, delta);

    this.timer += delta;

    var minutes,
        seconds,
        zeroPad,
        self = this;

    zeroPad = function (string, length) {
        string = String(string);
        length = parseInt(length, 10);

        while (string.length < length) {
            string = '0' + string;
        }

        return string;
    };

    minutes = zeroPad(Math.round(this.timer / 60), 2);
    seconds = zeroPad(Math.round(this.timer % 60), 2);

    // TODO break this out into two labels, to prevent text jumping
    this.timerLabel.text = 'Time\n' + minutes + ':' + seconds;

    if (this.tutorial) {
        var position,
            area,
            success;

        // check for placement of player squares over the hints
        switch (this.tutorialStep) {
            case 1:
                position = { x: 36.5, y: 33.5 };
                area = 9;
                break;
            case 2:
                position = { x: 36.5, y: 124.75 };
                area = 6;
                break;
            case 3:
                position = { x: -54.75, y: 124.75 };
                area = 4;
                break;
            case 4:
                position = { x: -54.75, y: 33.5 };
                area = 6;
                break;
        }

        success = this.squares.find(function (square) {
            return square.position.x === position.x &&
                    square.position.y === position.y &&
                    square.area === area;
        });

        if (success) {
            this.tutorialStep += 1;
            this.displayTutorial();
        }
    }
};

GameScene.prototype.displayTutorial = function () {
    var text,
        action;

    action = Arcadia.ENV.mobile ? 'Tap' : 'Click';

    text = [
        'intentionally left blank',
        action + ' and drag to\ndraw a rectangle on\ntop of each number.',
        'Each number\nequals the area\nof its rectangle.',
        'Rectangles cover\nonly one number.',
        'Rectangles\ncan\'t overlap!'
    ];

    this.hintSquare.alpha = 0.5;

    this.tutorialLabel.text = text[this.tutorialStep];

    switch (this.tutorialStep) {
        case 1:
            this.hintSquare.position = { x: 36.5, y: 33.5 };
            this.hintSquare.size = { width: 109.5, height: 109.5 };
            break;
        case 2:
            this.hintSquare.position = { x: 36.5, y: 124.75 };
            this.hintSquare.size = { width: 109.5, height: 73 };
            break;
        case 3:
            this.hintSquare.position = { x: -54.75, y: 124.75 };
            this.hintSquare.size = { width: 73, height: 73 };
            break;
        case 4:
            this.hintSquare.position = { x: -54.75, y: 33.5 };
            this.hintSquare.size = { width: 73, height: 109.5 };
            break;
        default:
            this.hintSquare.alpha = 0;
            break;
    }
};

GameScene.prototype.onPointStart = function (points) {
    var values, row, column, self;

    if (this.ignoreInput) {
        return;
    }

    self = this;
    values = this.grid.getRowAndColumn(points[0]);
    row = values[0];
    column = values[1];

    if (row === null || column === null) {
        return;
    }

    this.startPoint = points[0];
    this.startRow = this.previousRow = row;
    this.startColumn = this.previousColumn = column;

    this.activeSquare.position = {
        x: this.grid.bounds.left + column * this.grid.cellSize + this.grid.cellSize / 2,
        y: this.grid.bounds.top + row * this.grid.cellSize + this.grid.cellSize / 2
    };

    // Make slightly smaller; was causing erroneous collisions
    this.activeSquare.size = {
        width: this.grid.cellSize - 1,
        height: this.grid.cellSize - 1
    };

    // Determine if the square collides with another;
    // if so, delete the old one
    this.squares.forEach(function (square, index) {
        if (self.activeSquare.collidesWith(square)) {
            self.remove(square);
            self.squares.splice(index, 1);
            sona.play('erase');
        }
    });
};

GameScene.prototype.onPointMove = function (points) {
    var values, row, column, width, height;

    if (this.ignoreInput) {
        return;
    }

    if (this.startRow === null || this.startColumn === null) {
        return;
    }

    values = this.grid.getRowAndColumn(points[0]);
    row = values[0];
    column = values[1];

    if (row === null || column === null) {
        return;
    }

    // This allows a single click/tap to remove squares
    // Player has to move input at least 5px to start drawing a new one
    if (Arcadia.distance(points[0], this.startPoint) > 5 && this.activeSquare.alpha === 0) {
        this.activeSquare.alpha = 1;
        this.areaLabel.text = 'Area\n1';
        sona.play('move');
    }

    width = Math.abs(this.startColumn - column) + 1;
    height = Math.abs(this.startRow - row) + 1;

    // Set position
    this.activeSquare.position = {
        x: this.grid.bounds.left + ((width / 2 + this.startColumn) * this.grid.cellSize),
        y: this.grid.bounds.top + ((height / 2 + this.startRow) * this.grid.cellSize)
    };

    // Change size if necessary
    if (row !== this.previousRow) {
        this.activeSquare.size = {
            width: this.activeSquare.size.width,
            height: height * this.grid.cellSize
        };
    }

    // Offset position if necessary
    if (row < this.startRow) {
        this.activeSquare.position = {
            x: this.activeSquare.position.x,
            y: this.activeSquare.position.y - ((this.startRow - row) * this.grid.cellSize)
        };
    }

    // Change size if necessary
    if (column !== this.previousColumn) {
        this.activeSquare.size = {
            width: width * this.grid.cellSize,
            height: this.activeSquare.size.height
        };
    }

    // Offset position if necessary
    if (column < this.startColumn) {
        this.activeSquare.position = {
            x: this.activeSquare.position.x - ((this.startColumn - column) * this.grid.cellSize),
            y: this.activeSquare.position.y
        };
    }

    if (row !== this.previousRow || column !== this.previousColumn) {
        sona.play('move');
        console.log('trying to play sound');
        this.areaLabel.text = 'Area\n' + (width * height);
    }

    this.previousRow = row;
    this.previousColumn = column;
};

GameScene.prototype.onPointEnd = function (points) {
    var width,
        height,
        area,
        dupe;

    if (this.activeSquare.alpha === 1) {
        width = Math.abs(this.startColumn - this.previousColumn) + 1;
        height = Math.abs(this.startRow - this.previousRow) + 1;
        area = width * height;

        // Dupe the activeSquare
        dupe = new Square({
            position: {
                x: this.activeSquare.position.x,
                y: this.activeSquare.position.y
            },
            size: {
                width: this.activeSquare.size.width,
                height: this.activeSquare.size.height
            },
            area: area  // non-standard prop
        });

        this.add(dupe);
        this.squares.push(dupe);

        dupe.tween('scale', 1.1, 50, 'linearNone', function () {
            dupe.tween('scale', 1, 100);
        });

        // TODO ?
        // Check if square overlaps a clue
        // If square overlaps a single clue, check if the area matches the clue
        // If area matches the single clue, give the square a different color

        // Reset the activeSquare
        this.activeSquare.alpha = 0;
    }

    // Check if player has won
    if (this.check()) {
        this.win();
    }

    // Clear out previous data
    this.startRow = this.previousRow = null;
    this.startColumn = this.previousColumn = null;
    this.areaLabel.text = 'Area\n--'
};

GameScene.prototype.check = function () {
    var square, clue, self;

    self = this;

    if (this.squares.length != this.clues.length) {
        console.log('Square count doesn\'t match clue count');
        return false;
    }

    var success = true;

    this.squares.forEach(function (square) {
        var collisionCount = 0;
        var validClue = null;

        self.clues.forEach(function (clue) {
            if (clue.collidesWith(square)) {
                validClue = clue;
                collisionCount += 1;
            }
        });

        if (collisionCount > 1 || collisionCount === 0) {
            console.log("Failing because a clue has either no squares covering it, or multiple squares covering it");
            success = false;
        } else if (validClue.number !== square.area) {
            console.log("Clue (" + validClue.number + ") and Square area (" + square.area  + ") don't match!");
            success = false;
        }
    });

    return success;
};

GameScene.prototype.win = function () {
    alert('u solved the puzzle, bro');

    var completed = localStorage.getObject('completed')
    if (completed === null) {
        completed = [];
        while (completed.length < LEVELS.length) {
            completed.push(null);
        }
    }
    completed[this.level] = true;
    localStorage.setObject('completed', completed);

    sona.play('win');
    Arcadia.changeScene(LevelSelectScene);
};

GameScene.prototype.drawClues = function () {
    var self = this;

    this.levelData.clues.forEach(function (clue) {
        var clueLabel,
            x = clue[0],
            y = clue[1],
            value = clue[2];

        clueLabel = new Clue({
            number: value,
            position: {
                x: self.grid.bounds.left + (x * self.grid.cellSize) + Clue.SIZE / 2 + 2, // TODO: get rid of these magic numbers
                y: self.grid.bounds.top + (y * self.grid.cellSize) + Clue.SIZE / 2 + 2
            }
        });
        self.add(clueLabel);
        self.clues.push(clueLabel);
    });
};

GameScene.prototype.drawUi = function () {
    var areaLabelBackground,
        timerLabelBackground,
        quitButton,
        resetButton,
        padding = 5,
        self = this;

    quitButton = new Arcadia.Button({
        color: null,
        border: '2px white',
        label: new Arcadia.Label({
            color: 'white',
            text: 'quit',
            font: '20px monospace',   // TODO button throws exception w/o a font arg
        }),
        size: { width: Grid.MAX_SIZE / 2 - padding, height: 40 },
        action: function () {
            sona.play('button');
            Arcadia.changeScene(LevelSelectScene);
        }
    });
    quitButton.position =  {
        x: quitButton.size.width / 2 + padding,
        y: -this.size.height / 2 + quitButton.size.height / 2 + this.verticalPadding
    };
    this.add(quitButton);

    resetButton = new Arcadia.Button({
        color: null,
        border: '2px white',
        label: new Arcadia.Label({
            color: 'white',
            text: 'reset',
            font: '20px monospace'
        }),
        size: { width: Grid.MAX_SIZE / 2 - padding, height: 40 },
        action: function () {
            sona.play('button');
            // TODO: maybe have a confirm dialog here
            self.squares.forEach(function (square) {
                self.remove(square);
            });
            self.squares = [];
        }
    });
    resetButton.position =  {
        x: -resetButton.size.width / 2 - padding,
        y: -this.size.height / 2 + resetButton.size.height / 2 + this.verticalPadding
    };
    this.add(resetButton);

    areaLabelBackground = new Arcadia.Shape({
        color: null,
        border: '2px white',
        size: { width: Grid.MAX_SIZE / 2 - padding, height: 80 }
    });
    areaLabelBackground.position =  {
        x: -areaLabelBackground.size.width / 2 - padding,
        y: resetButton.position.y + resetButton.size.height / 2 + areaLabelBackground.size.height / 2 + padding * 2
    };
    this.add(areaLabelBackground);

    this.areaLabel = new Arcadia.Label({
        color: 'white',
        text: 'Area\n--',
        font: '28px monospace'
    });
    areaLabelBackground.add(this.areaLabel);

    timerLabelBackground = new Arcadia.Shape({
        color: null,
        border: '2px white',
        size: { width: Grid.MAX_SIZE / 2 - padding, height: 80 }
    });
    timerLabelBackground.position =  {
        x: timerLabelBackground.size.width / 2 + padding,
        y: quitButton.position.y + quitButton.size.height / 2 + timerLabelBackground.size.height / 2 + padding * 2
    };
    this.add(timerLabelBackground);

    this.timerLabel = new Arcadia.Label({
        color: 'white',
        text: 'Time\n00:00',
        font: '28px monospace'
    });
    timerLabelBackground.add(this.timerLabel);

    if (this.tutorial) {
        this.tutorialLabelBackground = new Arcadia.Shape({
            color: null,
            border: '2px white',
            size: { width: Grid.MAX_SIZE / 1.5, height: 110 },
            position: { x: 0, y: 230 }
        });
        this.add(this.tutorialLabelBackground);

        this.tutorialLabel = new Arcadia.Label({
            color: 'white',
            text: 'Tutorial text goes here\nhow much text can\nfit in this box?\na lot apparently',
            font: '20px monospace'
        });
        this.tutorialLabelBackground.add(this.tutorialLabel);
    }
};

/*jslint sloppy: true */
/*globals Arcadia, window, console, localStorage, sona, LEVELS,
GameScene, TitleScene, Thumbnail */

var LevelSelectScene = function (options) {
    Arcadia.Scene.apply(this, arguments);

    options = options || {};

    var self = this;

    Arcadia.cycleBackground();

    this.selectedLevel = parseInt(localStorage.getItem('selectedLevel'), 10) || options.level || 0;
    this.perPage = 9;
    this.totalPages = Math.ceil(LEVELS.length / this.perPage);
    this.currentPage = Math.floor(this.selectedLevel / this.perPage);
    this.completed = localStorage.getObject('completed') || Array(LEVELS.length);

    this.drawUi();
    this.updatePageLabel();

    // Create two "pages" of thumbnail previews
    this.thumbnails = [[], []];

    // Store the default coords of each thumbnail (used for resetting after animations, etc.)
    this.thumbnailPositions = [];

    this.thumbnails.forEach(function (page) {
        var thumbnail,
            thumbnailIndex,
            index,
            previewPadding = 10;

        while (page.length < self.perPage) {
            thumbnailIndex = page.length;
            index = self.currentPage * self.perPage + thumbnailIndex;

            self.thumbnailPositions[thumbnailIndex] = {
                x: -(Thumbnail.SIZE + previewPadding) + (thumbnailIndex % 3) * (Thumbnail.SIZE + previewPadding),
                y: -(Thumbnail.SIZE + previewPadding) + Math.floor(thumbnailIndex / 3) * (Thumbnail.SIZE + previewPadding)
            };

            thumbnail = new Thumbnail({
                position: {
                    x: self.thumbnailPositions[thumbnailIndex].x,
                    y: self.thumbnailPositions[thumbnailIndex].y
                }
            });

            thumbnail.drawPreview(index, self.completed);

            self.add(thumbnail);
            page.push(thumbnail);
        }
    });

    // Move second page offscreen
    this.thumbnails[1].forEach(function (thumbnail) {
        thumbnail.position = {
            x: thumbnail.position.x + self.size.width,
            y: thumbnail.position.y
        };
    });

    this.activeThumbnailPage = 0;

    if (this.currentPage === this.totalPages - 1) {
        this.nextButton.disabled = true;
        this.nextButton.alpha = 0.5;
    }

    if (this.currentPage === 0) {
        this.previousButton.disabled = true;
        this.previousButton.alpha = 0.5;
    }

    // Highlight the selected level thumbnail
    this.previousThumbnail = this.thumbnails[this.activeThumbnailPage][this.selectedLevel - this.currentPage * this.perPage];
    this.previousThumbnail.highlight();
};

LevelSelectScene.prototype = new Arcadia.Scene();

LevelSelectScene.prototype.next = function () {
    var offset = -Arcadia.WIDTH,
        thumbnail,
        self = this;

    if (this.currentPage < this.totalPages - 1) {
        sona.play('button');
        this.nextButton.disabled = true;
        this.nextButton.alpha = 0.5;

        // Move (old) current page to the left
        this.thumbnails[this.activeThumbnailPage].forEach(function (shape, index) {
            var delay = Math.floor(index / 3) * LevelSelectScene.TRANSITION_DELAY;
            window.setTimeout(function () {
                shape.tween('position', { x: shape.position.x + offset, y: shape.position.y }, LevelSelectScene.TRANSITION_DURATION, LevelSelectScene.TRANSITION_TYPE);
            }, delay);
        });

        // increment currentPage
        this.currentPage += 1;

        // Toggle this var between 0 and 1
        this.activeThumbnailPage = this.activeThumbnailPage === 1 ? 0 : 1;

        // Move (new) current page to the left
        this.thumbnails[this.activeThumbnailPage].forEach(function (shape, index) {
            var delay,
                levelIndex;

            // Move offscreen to the right
            shape.position = {
                x: self.thumbnailPositions[index].x - offset,
                y: shape.position.y
            };

            levelIndex = self.currentPage * self.perPage + index;
            shape.drawPreview(levelIndex, self.completed);

            delay = Math.floor(index / 3) * LevelSelectScene.TRANSITION_DELAY + 100;

            window.setTimeout(function () {
                shape.tween('position', { x: shape.position.x + offset, y: shape.position.y }, LevelSelectScene.TRANSITION_DURATION, LevelSelectScene.TRANSITION_TYPE);
            }, delay);
        });

        thumbnail = this.thumbnails[this.activeThumbnailPage][0];
        thumbnail.highlight();
        this.previousThumbnail.lowlight();
        this.previousThumbnail = thumbnail;
        this.selectedLevel = this.currentPage * this.perPage;
        this.updatePageLabel();
        localStorage.setItem('selectedLevel', this.selectedLevel);

        window.setTimeout(function () {
            self.nextButton.disabled = false;
            if (self.currentPage < self.totalPages - 1) {
                self.nextButton.alpha = 1;
            }
        }, LevelSelectScene.TOTAL_TRANSITION_DURATION);

        if (this.previousButton.alpha < 1) {
            this.previousButton.alpha = 1;
        }
    }
};

LevelSelectScene.prototype.previous = function () {
    var offset = Arcadia.WIDTH,
        thumbnail,
        self = this;

    if (this.currentPage > 0) {
        sona.play('button');
        this.previousButton.disabled = true;
        this.previousButton.alpha = 0.5;

        // Move (old) current page to the right
        this.thumbnails[this.activeThumbnailPage].forEach(function (shape, index) {
            var delay = Math.floor((self.perPage - index - 1) / 3) * LevelSelectScene.TRANSITION_DELAY;
            window.setTimeout(function () {
                shape.tween('position', { x: shape.position.x + offset, y: shape.position.y }, LevelSelectScene.TRANSITION_DURATION, LevelSelectScene.TRANSITION_TYPE);
            }, delay);
        });

        // decrement currentPage
        this.currentPage -= 1;

        // Toggle this var between 0 and 1
        this.activeThumbnailPage = this.activeThumbnailPage === 1 ? 0 : 1;

        // Move (new) current page to the right
        this.thumbnails[this.activeThumbnailPage].forEach(function (shape, index) {
            var delay,
                levelIndex;

            // Move offscreen to the left
            shape.position = {
                x: self.thumbnailPositions[index].x - offset,
                y: shape.position.y
            };

            levelIndex = self.currentPage * self.perPage + index;
            shape.drawPreview(levelIndex, self.completed);

            delay = Math.floor((self.perPage - index - 1) / 3) * LevelSelectScene.TRANSITION_DELAY + 100;

            window.setTimeout(function () {
                shape.tween('position', { x: shape.position.x + offset, y: shape.position.y }, LevelSelectScene.TRANSITION_DURATION, LevelSelectScene.TRANSITION_TYPE);
            }, delay);
        });

        thumbnail = this.thumbnails[this.activeThumbnailPage][0];
        thumbnail.highlight();
        this.previousThumbnail.lowlight();
        this.previousThumbnail = thumbnail;
        this.selectedLevel = this.currentPage * this.perPage;
        this.updatePageLabel();
        localStorage.setItem('selectedLevel', this.selectedLevel);

        window.setTimeout(function () {
            self.previousButton.disabled = false;
            if (self.currentPage > 0) {
                self.previousButton.alpha = 1;
            }
        }, LevelSelectScene.TOTAL_TRANSITION_DURATION);

        if (this.nextButton.alpha < 1) {
            this.nextButton.alpha = 1;
        }
    }
};

LevelSelectScene.prototype.updatePageLabel = function () {
    this.pageLabel.text = (this.currentPage + 1) + '/' + this.totalPages;
    this.puzzleLabel.text = 'Puzzle #' + this.selectedLevel;
    this.difficultyLabel.text = 'Difficulty: ' + LEVELS[this.selectedLevel].difficulty;
};

LevelSelectScene.prototype.onPointEnd = function (points) {
    var self = this,
        cursor = {
            size: { width: 1, height: 1 },
            position: points[0]
        };

    // Determine if tap/click touched a thumbnail
    this.thumbnails[this.activeThumbnailPage].forEach(function (thumbnail, index) {
        if (thumbnail.collidesWith(cursor) && thumbnail.alpha === 1) {
            sona.play('button');

            thumbnail.highlight();
            self.previousThumbnail.lowlight();
            self.previousThumbnail = thumbnail;
            self.selectedLevel = self.currentPage * self.perPage + index;
            localStorage.setItem('selectedLevel', self.selectedLevel);
            self.updatePageLabel();
        }
    });
};

LevelSelectScene.prototype.drawUi = function () {
    var title,
        backButton,
        startButton,
        self = this;

    this.pageLabel = new Arcadia.Label({
        position: {
            x: 0,
            y: 145
        },
        font: '24px monospace'
    });
    this.add(this.pageLabel);

    this.puzzleLabel = new Arcadia.Label({
        position: {
            x: 0,
            y: 185
        },
        font: '24px monospace'
    });
    this.add(this.puzzleLabel);

    this.difficultyLabel = new Arcadia.Label({
        position: {
            x: 0,
            y: 220
        },
        font: '24px monospace'
    });
    this.add(this.difficultyLabel);

    backButton = new Arcadia.Button({
        position: { x: -this.size.width / 2 + 65, y: -this.size.height / 2 + 25 },
        size: { width: 120, height: 40 },
        color: null,
        border: '2px white',
        label: new Arcadia.Label({
            text: '← title',
            color: 'white',
            font: '24px monospace'
        }),
        action: function () {
            sona.play('button');
            Arcadia.changeScene(TitleScene);
        }
    });
    this.add(backButton);

    title = new Arcadia.Label({
        text: 'Choose\nPuzzle',
        font: '64px monospace',
        position: { x: 0, y: -this.size.height / 2 + 130 }
    });
    this.add(title);

    startButton = new Arcadia.Button({
        position: { x: 0, y: this.size.height / 2 - 50 },
        size: { width: 180, height: 50 },
        color: null,
        border: '2px white',
        label: new Arcadia.Label({
            text: 'play',
            font: '36px monospace'
        }),
        action: function () {
            sona.play('button');
            Arcadia.changeScene(GameScene, { level: self.selectedLevel });
        }
    });
    this.add(startButton);

    // Create previous/next buttons
    this.previousButton = new Arcadia.Button({
        position: { x: -this.size.width / 2 + 30, y: 0 },
        size: { width: 50, height: 50 },
        border: '2px white',
        color: null,
        vertices: 0,
        label: new Arcadia.Label({
            text: '<',
            font: '40px monospace'
        }),
        action: function () {
            self.previous();
        }
    });

    this.nextButton = new Arcadia.Button({
        position: { x: this.size.width / 2 - 30, y: 0 },
        size: { width: 50, height: 50 },
        border: '2px white',
        color: null,
        vertices: 0,
        label: new Arcadia.Label({
            text: '>',
            font: '40px monospace'
        }),
        action: function () {
            self.next();
        }
    });

    this.add(this.previousButton);
    this.add(this.nextButton);
};

LevelSelectScene.TRANSITION_TYPE = 'cubicInOut';
LevelSelectScene.TRANSITION_DURATION = 400;
LevelSelectScene.TRANSITION_DELAY = 100;
LevelSelectScene.TOTAL_TRANSITION_DURATION = 600;

/*jslint sloppy: true */
/*globals Arcadia, LevelSelectScene, localStorage, sona */

var TitleScene = function () {
    Arcadia.Scene.apply(this);

    Arcadia.cycleBackground();

    var titleLabel,
        startButton;

    titleLabel = new Arcadia.Label({
        text: 'Shikaku\nMadness',
        font: '64px monospace',
        position: {
            x: 0,
            y: -100
        }
    });

    this.add(titleLabel);

    startButton = new Arcadia.Button({
        position: { x: 0, y: 200 },
        size: { width: 180, height: 50 },
        color: null,
        border: '3px white',
        text: 'start',
        font: '36px monospace',
        action: function () {
            sona.play('button');
            Arcadia.changeScene(LevelSelectScene);
        }
    });
    this.add(startButton);
};

TitleScene.prototype = new Arcadia.Scene();
